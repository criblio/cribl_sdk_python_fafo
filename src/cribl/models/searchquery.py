"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .savessearchrunmode import SavesSearchRunMode
from cribl.types import BaseModel, Nullable, UNSET_SENTINEL
from enum import Enum
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class SearchQuery3Type(str, Enum):
    VALUES = "values"


class SearchQuery3TypedDict(TypedDict):
    type: SearchQuery3Type
    values: List[str]


class SearchQuery3(BaseModel):
    type: SearchQuery3Type

    values: List[str]


SearchQueryEarliestTypedDict = TypeAliasType(
    "SearchQueryEarliestTypedDict", Union[str, float]
)


SearchQueryEarliest = TypeAliasType("SearchQueryEarliest", Union[str, float])


SearchQueryLatestTypedDict = TypeAliasType(
    "SearchQueryLatestTypedDict", Union[str, float]
)


SearchQueryLatest = TypeAliasType("SearchQueryLatest", Union[str, float])


class SearchQuery2Type(str, Enum):
    INLINE = "inline"


class SearchQuery2TypedDict(TypedDict):
    earliest: Nullable[SearchQueryEarliestTypedDict]
    latest: Nullable[SearchQueryLatestTypedDict]
    query: Nullable[str]
    type: SearchQuery2Type
    parent_search_id: NotRequired[str]
    sample_rate: NotRequired[float]
    timezone: NotRequired[str]


class SearchQuery2(BaseModel):
    earliest: Nullable[SearchQueryEarliest]

    latest: Nullable[SearchQueryLatest]

    query: Nullable[str]

    type: SearchQuery2Type

    parent_search_id: Annotated[
        Optional[str], pydantic.Field(alias="parentSearchId")
    ] = None

    sample_rate: Annotated[Optional[float], pydantic.Field(alias="sampleRate")] = None

    timezone: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["parentSearchId", "sampleRate", "timezone"]
        nullable_fields = ["earliest", "latest", "query"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class SearchQueryType(str, Enum):
    SAVED = "saved"


class SearchQuery1TypedDict(TypedDict):
    query_id: str
    type: SearchQueryType
    query: NotRequired[str]
    run_mode: NotRequired[SavesSearchRunMode]


class SearchQuery1(BaseModel):
    query_id: Annotated[str, pydantic.Field(alias="queryId")]

    type: SearchQueryType

    query: Optional[str] = None

    run_mode: Annotated[
        Optional[SavesSearchRunMode], pydantic.Field(alias="runMode")
    ] = None


SearchQueryTypedDict = TypeAliasType(
    "SearchQueryTypedDict",
    Union[SearchQuery3TypedDict, SearchQuery1TypedDict, SearchQuery2TypedDict],
)


SearchQuery = TypeAliasType(
    "SearchQuery", Union[SearchQuery3, SearchQuery1, SearchQuery2]
)
