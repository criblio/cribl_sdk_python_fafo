"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_sdk_python_fafo.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PackageURLTypedDict(TypedDict):
    package_url: str
    r"""Package HTTP URL or local path"""
    package_hash_url: NotRequired[str]
    r"""Package's MD5 or SHA256 hash HTTP URL or local path"""


class PackageURL(BaseModel):
    package_url: Annotated[str, pydantic.Field(alias="packageUrl")]
    r"""Package HTTP URL or local path"""

    package_hash_url: Annotated[
        Optional[str], pydantic.Field(alias="packageHashUrl")
    ] = None
    r"""Package's MD5 or SHA256 hash HTTP URL or local path"""


class UpgradeMode(str, Enum):
    ROLLING = "rolling"
    REGULAR = "regular"
    BATCH = "batch"


class DistributedUpgradeRequestTypedDict(TypedDict):
    package_urls: NotRequired[List[PackageURLTypedDict]]
    r"""Provide your own URLs or local paths for platform-specific Cribl packages"""
    upgrade_percentage: NotRequired[float]
    r"""Percentage of the total worker nodes on the group to run the upgrade on"""
    worker_retries: NotRequired[float]
    r"""Number of times to retry conncecting to a worker node before marking the upgrade as failed."""
    worker_retry_delay: NotRequired[float]
    r"""Delay between retries"""
    upgrade_mode: NotRequired[UpgradeMode]
    version_to: NotRequired[str]


class DistributedUpgradeRequest(BaseModel):
    package_urls: Annotated[
        Optional[List[PackageURL]], pydantic.Field(alias="packageUrls")
    ] = None
    r"""Provide your own URLs or local paths for platform-specific Cribl packages"""

    upgrade_percentage: Annotated[
        Optional[float], pydantic.Field(alias="upgradePercentage")
    ] = 1
    r"""Percentage of the total worker nodes on the group to run the upgrade on"""

    worker_retries: Annotated[
        Optional[float], pydantic.Field(alias="workerRetries")
    ] = 5
    r"""Number of times to retry conncecting to a worker node before marking the upgrade as failed."""

    worker_retry_delay: Annotated[
        Optional[float], pydantic.Field(alias="workerRetryDelay")
    ] = 1000
    r"""Delay between retries"""

    upgrade_mode: Annotated[
        Optional[UpgradeMode], pydantic.Field(alias="upgradeMode")
    ] = None

    version_to: Annotated[Optional[str], pydantic.Field(alias="versionTo")] = None
