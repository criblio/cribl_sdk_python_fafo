"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dashboardelementtype import DashboardElementType
from .dashboardelementvariant import DashboardElementVariant
from .dashboardlayout import DashboardLayout, DashboardLayoutTypedDict
from .savedqueryschedule import SavedQuerySchedule, SavedQueryScheduleTypedDict
from .searchquery import SearchQuery, SearchQueryTypedDict
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ElementsType(str, Enum):
    MARKDOWN_DEFAULT = "markdown.default"


class Variant(str, Enum):
    MARKDOWN = "markdown"


class TwoTypedDict(TypedDict):
    id: str
    layout: DashboardLayoutTypedDict
    type: ElementsType
    variant: Variant
    description: NotRequired[str]
    empty: NotRequired[bool]
    hide_panel: NotRequired[bool]
    index: NotRequired[float]
    title: NotRequired[str]
    value: NotRequired[str]


class Two(BaseModel):
    id: str

    layout: DashboardLayout

    type: ElementsType

    variant: Variant

    description: Optional[str] = None

    empty: Optional[bool] = None

    hide_panel: Annotated[Optional[bool], pydantic.Field(alias="hidePanel")] = None

    index: Optional[float] = None

    title: Optional[str] = None

    value: Optional[str] = None


class Elements1TypedDict(TypedDict):
    id: str
    layout: DashboardLayoutTypedDict
    search: SearchQueryTypedDict
    type: DashboardElementType
    description: NotRequired[str]
    empty: NotRequired[bool]
    hide_panel: NotRequired[bool]
    horizontal_chart: NotRequired[bool]
    index: NotRequired[float]
    input_id: NotRequired[str]
    title: NotRequired[str]
    value: NotRequired[Dict[str, Any]]
    variant: NotRequired[DashboardElementVariant]


class Elements1(BaseModel):
    id: str

    layout: DashboardLayout

    search: SearchQuery

    type: DashboardElementType

    description: Optional[str] = None

    empty: Optional[bool] = None

    hide_panel: Annotated[Optional[bool], pydantic.Field(alias="hidePanel")] = None

    horizontal_chart: Annotated[
        Optional[bool], pydantic.Field(alias="horizontalChart")
    ] = None

    index: Optional[float] = None

    input_id: Annotated[Optional[str], pydantic.Field(alias="inputId")] = None

    title: Optional[str] = None

    value: Optional[Dict[str, Any]] = None

    variant: Optional[DashboardElementVariant] = None


ElementsTypedDict = TypeAliasType(
    "ElementsTypedDict", Union[TwoTypedDict, Elements1TypedDict]
)


Elements = TypeAliasType("Elements", Union[Two, Elements1])


class SearchDashboardTypedDict(TypedDict):
    created: float
    created_by: str
    elements: List[ElementsTypedDict]
    id: str
    modified: float
    name: str
    cache_ttl_seconds: NotRequired[float]
    category: NotRequired[str]
    description: NotRequired[str]
    display_created_by: NotRequired[str]
    display_modified_by: NotRequired[str]
    modified_by: NotRequired[str]
    pack_id: NotRequired[str]
    refresh_rate: NotRequired[float]
    resolved_dataset_ids: NotRequired[List[str]]
    schedule: NotRequired[SavedQueryScheduleTypedDict]


class SearchDashboard(BaseModel):
    created: float

    created_by: Annotated[str, pydantic.Field(alias="createdBy")]

    elements: List[Elements]

    id: str

    modified: float

    name: str

    cache_ttl_seconds: Annotated[
        Optional[float], pydantic.Field(alias="cacheTTLSeconds")
    ] = None

    category: Optional[str] = None

    description: Optional[str] = None

    display_created_by: Annotated[
        Optional[str], pydantic.Field(alias="displayCreatedBy")
    ] = None

    display_modified_by: Annotated[
        Optional[str], pydantic.Field(alias="displayModifiedBy")
    ] = None

    modified_by: Annotated[Optional[str], pydantic.Field(alias="modifiedBy")] = None

    pack_id: Annotated[Optional[str], pydantic.Field(alias="packId")] = None

    refresh_rate: Annotated[Optional[float], pydantic.Field(alias="refreshRate")] = None

    resolved_dataset_ids: Annotated[
        Optional[List[str]], pydantic.Field(alias="resolvedDatasetIds")
    ] = None

    schedule: Optional[SavedQuerySchedule] = None
