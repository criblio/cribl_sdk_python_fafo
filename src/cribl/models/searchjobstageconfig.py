"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jobexecutionwarning import JobExecutionWarning, JobExecutionWarningTypedDict
from .searchconfig import SearchConfig, SearchConfigTypedDict
from .stagedependency import StageDependency, StageDependencyTypedDict
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


SearchJobStageConfigEarliestTypedDict = TypeAliasType(
    "SearchJobStageConfigEarliestTypedDict", Union[str, float]
)


SearchJobStageConfigEarliest = TypeAliasType(
    "SearchJobStageConfigEarliest", Union[str, float]
)


SearchJobStageConfigLatestTypedDict = TypeAliasType(
    "SearchJobStageConfigLatestTypedDict", Union[str, float]
)


SearchJobStageConfigLatest = TypeAliasType(
    "SearchJobStageConfigLatest", Union[str, float]
)


class SearchJobStageConfigStatus(str, Enum):
    NEW = "new"
    FAILED = "failed"
    RUNNING = "running"
    COMPLETED = "completed"
    CANCELED = "canceled"
    QUEUED = "queued"


class SearchJobStageConfigTypedDict(TypedDict):
    dependencies: List[StageDependencyTypedDict]
    filter_: str
    id: str
    resolved_dataset_ids: List[str]
    search_config: SearchConfigTypedDict
    status: SearchJobStageConfigStatus
    sub_query_text: str
    cache_status_by_dataset_id: NotRequired[Any]
    earliest: NotRequired[SearchJobStageConfigEarliestTypedDict]
    execution_warnings: NotRequired[List[JobExecutionWarningTypedDict]]
    latest: NotRequired[SearchJobStageConfigLatestTypedDict]


class SearchJobStageConfig(BaseModel):
    dependencies: List[StageDependency]

    filter_: Annotated[str, pydantic.Field(alias="filter")]

    id: str

    resolved_dataset_ids: Annotated[
        List[str], pydantic.Field(alias="resolvedDatasetIds")
    ]

    search_config: Annotated[SearchConfig, pydantic.Field(alias="searchConfig")]

    status: SearchJobStageConfigStatus

    sub_query_text: Annotated[str, pydantic.Field(alias="subQueryText")]

    cache_status_by_dataset_id: Annotated[
        Optional[Any], pydantic.Field(alias="cacheStatusByDatasetId")
    ] = None

    earliest: Optional[SearchJobStageConfigEarliest] = None

    execution_warnings: Annotated[
        Optional[List[JobExecutionWarning]], pydantic.Field(alias="executionWarnings")
    ] = None

    latest: Optional[SearchJobStageConfigLatest] = None
