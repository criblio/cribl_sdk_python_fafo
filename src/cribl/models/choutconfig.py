"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .format_ import Format
from .httpoutauthconfig import HTTPOutAuthConfig, HTTPOutAuthConfigTypedDict
from .httpoutextraparamconfig import (
    HTTPOutExtraParamConfig,
    HTTPOutExtraParamConfigTypedDict,
)
from .httpoutresponseretryconfig import (
    HTTPOutResponseRetryConfig,
    HTTPOutResponseRetryConfigTypedDict,
)
from .mappingtype import MappingType
from .namevalue import NameValue, NameValueTypedDict
from .retrybackoffoptions import RetryBackoffOptions, RetryBackoffOptionsTypedDict
from .tlsclientparams import TLSClientParams, TLSClientParamsTypedDict
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CHOutConfigAuthType(str, Enum):
    TOKEN = "token"
    NONE = "none"
    TEXT_SECRET = "textSecret"
    BASIC = "basic"
    CREDENTIALS_SECRET = "credentialsSecret"
    SECRET = "secret"
    MANUAL = "manual"
    MANUAL_API_KEY = "manualAPIKey"
    SSL_USER_CERTIFICATE = "sslUserCertificate"


class CHOutConfigColumnMappingsTypedDict(TypedDict):
    column_name: str
    column_type: str
    column_value_expression: str


class CHOutConfigColumnMappings(BaseModel):
    column_name: Annotated[str, pydantic.Field(alias="columnName")]

    column_type: Annotated[str, pydantic.Field(alias="columnType")]

    column_value_expression: Annotated[
        str, pydantic.Field(alias="columnValueExpression")
    ]


class CHOutConfigUrlsTypedDict(TypedDict):
    pass


class CHOutConfigUrls(BaseModel):
    pass


class CHOutConfigTypedDict(TypedDict):
    async_inserts: bool
    database: str
    flush_period_sec: float
    format_: Format
    load_balanced: bool
    mapping_type: MappingType
    table_name: str
    url: str
    auth: NotRequired[HTTPOutAuthConfigTypedDict]
    auth_type: NotRequired[CHOutConfigAuthType]
    column_mappings: NotRequired[List[CHOutConfigColumnMappingsTypedDict]]
    compress: NotRequired[bool]
    concurrency: NotRequired[float]
    dump_format_errors_to_disk: NotRequired[bool]
    exclude_mapping_fields: NotRequired[List[str]]
    extra_http_headers: NotRequired[List[NameValueTypedDict]]
    extra_params: NotRequired[List[HTTPOutExtraParamConfigTypedDict]]
    failed_request_logging_mode: NotRequired[str]
    keep_alive: NotRequired[bool]
    max_connection_reuse_sec: NotRequired[float]
    max_payload_events: NotRequired[float]
    max_payload_size_kb: NotRequired[float]
    max_sockets: NotRequired[float]
    method: NotRequired[str]
    password: NotRequired[str]
    reject_unauthorized: NotRequired[bool]
    response_honor_retry_after_header: NotRequired[bool]
    response_retry_settings: NotRequired[List[HTTPOutResponseRetryConfigTypedDict]]
    safe_headers: NotRequired[List[str]]
    sql_username: NotRequired[str]
    table_name_expression: NotRequired[str]
    timeout_retry_settings: NotRequired[RetryBackoffOptionsTypedDict]
    timeout_sec: NotRequired[float]
    tls: NotRequired[TLSClientParamsTypedDict]
    token: NotRequired[str]
    total_memory_limit_kb: NotRequired[float]
    urls: NotRequired[List[CHOutConfigUrlsTypedDict]]
    use_round_robin_dns: NotRequired[bool]
    username: NotRequired[str]
    wait_for_async_inserts: NotRequired[bool]


class CHOutConfig(BaseModel):
    async_inserts: Annotated[bool, pydantic.Field(alias="asyncInserts")]

    database: str

    flush_period_sec: Annotated[float, pydantic.Field(alias="flushPeriodSec")]

    format_: Annotated[Format, pydantic.Field(alias="format")]

    load_balanced: Annotated[bool, pydantic.Field(alias="loadBalanced")]

    mapping_type: Annotated[MappingType, pydantic.Field(alias="mappingType")]

    table_name: Annotated[str, pydantic.Field(alias="tableName")]

    url: str

    auth: Optional[HTTPOutAuthConfig] = None

    auth_type: Annotated[
        Optional[CHOutConfigAuthType], pydantic.Field(alias="authType")
    ] = None

    column_mappings: Annotated[
        Optional[List[CHOutConfigColumnMappings]],
        pydantic.Field(alias="columnMappings"),
    ] = None

    compress: Optional[bool] = None

    concurrency: Optional[float] = None

    dump_format_errors_to_disk: Annotated[
        Optional[bool], pydantic.Field(alias="dumpFormatErrorsToDisk")
    ] = None

    exclude_mapping_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="excludeMappingFields")
    ] = None

    extra_http_headers: Annotated[
        Optional[List[NameValue]], pydantic.Field(alias="extraHttpHeaders")
    ] = None

    extra_params: Annotated[
        Optional[List[HTTPOutExtraParamConfig]], pydantic.Field(alias="extraParams")
    ] = None

    failed_request_logging_mode: Annotated[
        Optional[str], pydantic.Field(alias="failedRequestLoggingMode")
    ] = None

    keep_alive: Annotated[Optional[bool], pydantic.Field(alias="keepAlive")] = None

    max_connection_reuse_sec: Annotated[
        Optional[float], pydantic.Field(alias="maxConnectionReuseSec")
    ] = None

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = None

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = None

    max_sockets: Annotated[Optional[float], pydantic.Field(alias="maxSockets")] = None

    method: Optional[str] = None

    password: Optional[str] = None

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = None

    response_retry_settings: Annotated[
        Optional[List[HTTPOutResponseRetryConfig]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None

    sql_username: Annotated[Optional[str], pydantic.Field(alias="sqlUsername")] = None

    table_name_expression: Annotated[
        Optional[str], pydantic.Field(alias="tableNameExpression")
    ] = None

    timeout_retry_settings: Annotated[
        Optional[RetryBackoffOptions], pydantic.Field(alias="timeoutRetrySettings")
    ] = None

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = None

    tls: Optional[TLSClientParams] = None

    token: Optional[str] = None

    total_memory_limit_kb: Annotated[
        Optional[float], pydantic.Field(alias="totalMemoryLimitKB")
    ] = None

    urls: Optional[List[CHOutConfigUrls]] = None

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = None

    username: Optional[str] = None

    wait_for_async_inserts: Annotated[
        Optional[bool], pydantic.Field(alias="waitForAsyncInserts")
    ] = None
