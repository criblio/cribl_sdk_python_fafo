"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_sdk_python_fafo.types import BaseModel
from enum import Enum
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class LookupFileMode2(str, Enum):
    MEMORY = "memory"
    DISK = "disk"


class LookupFileType2(str, Enum):
    r"""Task type"""

    IMPORT = "IMPORT"
    INDEX = "INDEX"


class PendingTask2TypedDict(TypedDict):
    id: NotRequired[str]
    r"""Task ID (generated)."""
    type: NotRequired[LookupFileType2]
    r"""Task type"""
    error: NotRequired[str]
    r"""Error message if task has failed"""


class PendingTask2(BaseModel):
    id: Optional[str] = None
    r"""Task ID (generated)."""

    type: Optional[LookupFileType2] = None
    r"""Task type"""

    error: Optional[str] = None
    r"""Error message if task has failed"""


class LookupFile2TypedDict(TypedDict):
    id: str
    content: NotRequired[str]
    r"""File content."""
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    version: NotRequired[str]
    r"""Unique string generated for each modification of this lookup"""
    mode: NotRequired[LookupFileMode2]
    pending_task: NotRequired[PendingTask2TypedDict]


class LookupFile2(BaseModel):
    id: str

    content: Optional[str] = None
    r"""File content."""

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    version: Optional[str] = None
    r"""Unique string generated for each modification of this lookup"""

    mode: Optional[LookupFileMode2] = LookupFileMode2.MEMORY

    pending_task: Annotated[
        Optional[PendingTask2], pydantic.Field(alias="pendingTask")
    ] = None


class FileInfoTypedDict(TypedDict):
    filename: str


class FileInfo(BaseModel):
    filename: str


class LookupFileMode1(str, Enum):
    MEMORY = "memory"
    DISK = "disk"


class LookupFileType1(str, Enum):
    r"""Task type"""

    IMPORT = "IMPORT"
    INDEX = "INDEX"


class PendingTask1TypedDict(TypedDict):
    id: NotRequired[str]
    r"""Task ID (generated)."""
    type: NotRequired[LookupFileType1]
    r"""Task type"""
    error: NotRequired[str]
    r"""Error message if task has failed"""


class PendingTask1(BaseModel):
    id: Optional[str] = None
    r"""Task ID (generated)."""

    type: Optional[LookupFileType1] = None
    r"""Task type"""

    error: Optional[str] = None
    r"""Error message if task has failed"""


class LookupFile1TypedDict(TypedDict):
    id: str
    file_info: NotRequired[FileInfoTypedDict]
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    version: NotRequired[str]
    r"""Unique string generated for each modification of this lookup"""
    mode: NotRequired[LookupFileMode1]
    pending_task: NotRequired[PendingTask1TypedDict]


class LookupFile1(BaseModel):
    id: str

    file_info: Annotated[Optional[FileInfo], pydantic.Field(alias="fileInfo")] = None

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    version: Optional[str] = None
    r"""Unique string generated for each modification of this lookup"""

    mode: Optional[LookupFileMode1] = LookupFileMode1.MEMORY

    pending_task: Annotated[
        Optional[PendingTask1], pydantic.Field(alias="pendingTask")
    ] = None


LookupFileUnionTypedDict = TypeAliasType(
    "LookupFileUnionTypedDict", Union[LookupFile1TypedDict, LookupFile2TypedDict]
)


LookupFileUnion = TypeAliasType("LookupFileUnion", Union[LookupFile1, LookupFile2])


class LookupFileInput2TypedDict(TypedDict):
    id: str
    content: NotRequired[str]
    r"""File content."""
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    mode: NotRequired[LookupFileMode2]


class LookupFileInput2(BaseModel):
    id: str

    content: Optional[str] = None
    r"""File content."""

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    mode: Optional[LookupFileMode2] = LookupFileMode2.MEMORY


class LookupFileInput1TypedDict(TypedDict):
    id: str
    file_info: NotRequired[FileInfoTypedDict]
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    mode: NotRequired[LookupFileMode1]


class LookupFileInput1(BaseModel):
    id: str

    file_info: Annotated[Optional[FileInfo], pydantic.Field(alias="fileInfo")] = None

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    mode: Optional[LookupFileMode1] = LookupFileMode1.MEMORY


LookupFileInputUnionTypedDict = TypeAliasType(
    "LookupFileInputUnionTypedDict",
    Union[LookupFileInput1TypedDict, LookupFileInput2TypedDict],
)


LookupFileInputUnion = TypeAliasType(
    "LookupFileInputUnion", Union[LookupFileInput1, LookupFileInput2]
)
