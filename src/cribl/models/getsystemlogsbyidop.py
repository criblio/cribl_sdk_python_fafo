"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSystemLogsByIDRequestTypedDict(TypedDict):
    id: str
    r"""Log ID"""
    limit: NotRequired[int]
    r"""Maximum number of log lines to retrieve starting from offset."""
    end_offset: NotRequired[int]
    r"""in the current log file to fetch the log events upto."""
    et: NotRequired[int]
    r"""Epoch timestamp of the earliest event (includes rolled files present on disk)"""
    lt: NotRequired[int]
    r"""Epoch timestamp of the latest event (includes rolled files present on disk)"""
    filter_: NotRequired[str]
    r"""Filter"""


class GetSystemLogsByIDRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Log ID"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Maximum number of log lines to retrieve starting from offset."""

    end_offset: Annotated[
        Optional[int],
        pydantic.Field(alias="endOffset"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""in the current log file to fetch the log events upto."""

    et: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Epoch timestamp of the earliest event (includes rolled files present on disk)"""

    lt: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Epoch timestamp of the latest event (includes rolled files present on disk)"""

    filter_: Annotated[
        Optional[str],
        pydantic.Field(alias="filter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter"""


class GetSystemLogsByIDResponseBodyTypedDict(TypedDict):
    r"""a list of any objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[Dict[str, Any]]]


class GetSystemLogsByIDResponseBody(BaseModel):
    r"""a list of any objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Dict[str, Any]]] = None
