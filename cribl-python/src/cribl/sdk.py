"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
from cribl import models, utils
from cribl._hooks import SDKHooks
from cribl.appscope_configs import AppscopeConfigs
from cribl.auth import Auth
from cribl.authorize import Authorize
from cribl.banners import Banners
from cribl.certificates import Certificates
from cribl.changelog import Changelog
from cribl.click_house import ClickHouse
from cribl.clui import Clui
from cribl.collectors import Collectors
from cribl.conditions import Conditions
from cribl.consent import Consent
from cribl.dashboardcategories import DashboardCategories
from cribl.dashboards import Dashboards
from cribl.database_connections import DatabaseConnections
from cribl.datasets import Datasets
from cribl.diag_sdk import DiagSDK
from cribl.distributed import Distributed
from cribl.edge import Edge
from cribl.edgeappscopeprocesses import EdgeAppScopeProcesses
from cribl.edgecontainers import EdgeContainers
from cribl.edgeevents import EdgeEvents
from cribl.edgefiles import EdgeFiles
from cribl.edgels import EdgeLs
from cribl.edgeprocesses import EdgeProcesses
from cribl.event_breaker_rules import EventBreakerRules
from cribl.events import Events
from cribl.executors import Executors
from cribl.expressions import Expressions
from cribl.features import Features
from cribl.file import File
from cribl.filesampler import FileSampler
from cribl.functions import Functions
from cribl.git import Git
from cribl.global_variables import GlobalVariables
from cribl.grokfiles import Grokfiles
from cribl.groups import Groups
from cribl.health import Health
from cribl.hmac_functions import HmacFunctions
from cribl.ingest import Ingest
from cribl.inputs import Inputs
from cribl.jobs import Jobs
from cribl.keys import Keys
from cribl.kube_logs import KubeLogs
from cribl.kube_proxy import KubeProxy
from cribl.lake import Lake
from cribl.licenses import Licenses
from cribl.logger import Logger
from cribl.logging import Logging
from cribl.lookups import Lookups
from cribl.macros import Macros
from cribl.messages import Messages
from cribl.metrics import Metrics
from cribl.notification_targets import NotificationTargets
from cribl.notifications import Notifications
from cribl.outputs import Outputs
from cribl.packs import Packs
from cribl.parquetschemas import Parquetschemas
from cribl.parsers import Parsers
from cribl.pipelines import Pipelines
from cribl.policies import Policies
from cribl.preview import Preview
from cribl.processes import Processes
from cribl.profiler import Profiler
from cribl.projects import Projects
from cribl.protobuflibraries import Protobuflibraries
from cribl.regexes import Regexes
from cribl.roles import Roles
from cribl.routes_sdk import RoutesSDK
from cribl.samples import Samples
from cribl.saved_jobs import SavedJobs
from cribl.savedqueries import SavedQueries
from cribl.schemas import Schemas
from cribl.scripts import Scripts
from cribl.search import Search
from cribl.secrets import Secrets
from cribl.security import Security
from cribl.subscriptions import Subscriptions
from cribl.system import System
from cribl.teams import Teams
from cribl.teams_acl import TeamsACL
from cribl.trust_policies import TrustPolicies
from cribl.types import OptionalNullable, UNSET
from cribl.uistate import UIState
from cribl.usage_groups import UsageGroups
from cribl.users import Users
from cribl.users_acl import UsersACL
from cribl.versioning import Versioning
from cribl.workers import Workers
import httpx
from typing import Any, Callable, Dict, Optional, Union, cast
import weakref


class Cribl(BaseSDK):
    r"""Cribl API Reference: This API Reference lists available REST endpoints, along with their supported operations for accessing, creating, updating, or deleting resources. See our complementary product documentation at [docs.cribl.io](http://docs.cribl.io)."""

    projects: Projects
    r"""Actions related to Projects"""
    subscriptions: Subscriptions
    r"""Actions related to Subscriptions"""
    versioning: Versioning
    r"""Actions related to Versioning"""
    git: Git
    r"""Actions related to Git"""
    preview: Preview
    r"""Actions related to data preview"""
    samples: Samples
    r"""Actions related to samples"""
    pipelines: Pipelines
    r"""Actions related to Pipelines"""
    banners: Banners
    r"""Actions related to Banners"""
    certificates: Certificates
    r"""Actions related to Certificates"""
    features: Features
    r"""Actions related to Features"""
    saved_jobs: SavedJobs
    r"""Actions related to Saved Jobs"""
    keys: Keys
    r"""Actions related to encryption keys"""
    messages: Messages
    r"""Actions related to messages"""
    notification_targets: NotificationTargets
    r"""Actions related to Notification Targets"""
    notifications: Notifications
    r"""Actions related to Notifications"""
    policies: Policies
    r"""Actions related to Policies"""
    roles: Roles
    r"""Actions related to Roles"""
    scripts: Scripts
    r"""Actions related to scripts"""
    teams: Teams
    r"""Actions related to Teams"""
    users: Users
    r"""Actions related to users"""
    lake: Lake
    r"""Actions related to Lake"""
    dashboard_categories: DashboardCategories
    r"""Actions related to DashboardCategories"""
    usage_groups: UsageGroups
    r"""Actions related to Usage Groups"""
    datasets: Datasets
    r"""Actions related to Datasets"""
    users_acl: UsersACL
    r"""Actions related to Users ACL"""
    teams_acl: TeamsACL
    r"""Actions related to Teams ACL"""
    appscope_configs: AppscopeConfigs
    r"""Actions related to Appscope Configs"""
    grokfiles: Grokfiles
    r"""Actions related to Grok files"""
    lookups: Lookups
    r"""Actions related to lookups"""
    parsers: Parsers
    r"""Actions related to parsers"""
    protobuflibraries: Protobuflibraries
    r"""Actions related to Protobuf libraries"""
    regexes: Regexes
    r"""Actions related to regular expressions"""
    dashboards: Dashboards
    r"""Actions related to Dashboards"""
    macros: Macros
    r"""Actions related to Macros"""
    saved_queries: SavedQueries
    r"""Actions related to saved queries"""
    search: Search
    r"""Actions related to Search"""
    database_connections: DatabaseConnections
    r"""Actions related to Database Connections"""
    event_breaker_rules: EventBreakerRules
    r"""Actions related to Event Breaker rules"""
    global_variables: GlobalVariables
    r"""Actions related to Global Variables"""
    hmac_functions: HmacFunctions
    r"""Actions related to HMAC functions"""
    inputs: Inputs
    r"""Actions related to inputs"""
    outputs: Outputs
    r"""Actions related to outputs"""
    parquetschemas: Parquetschemas
    r"""Actions related to Parquet schemas"""
    profiler: Profiler
    r"""Actions related to Profiler"""
    routes: RoutesSDK
    r"""Actions related to Routes"""
    schemas: Schemas
    r"""Actions related to Schemas"""
    secrets: Secrets
    r"""Actions related to Secrets"""
    edge_app_scope_processes: EdgeAppScopeProcesses
    r"""Actions related to Edge AppScope processes"""
    edge: Edge
    r"""Actions enabled in Edge"""
    edge_events: EdgeEvents
    r"""Actions related to EdgeEvents"""
    events: Events
    r"""Actions related to Events"""
    edge_files: EdgeFiles
    r"""Actions related to Edge Files"""
    edge_ls: EdgeLs
    r"""Actions related to Edge listing"""
    file: File
    r"""Actions related to File"""
    ingest: Ingest
    r"""Actions related to Ingest"""
    file_sampler: FileSampler
    r"""Actions related to FileSampler"""
    kube_logs: KubeLogs
    r"""Actions related to Kube Logs"""
    kube_proxy: KubeProxy
    r"""Actions related to Kube Proxy"""
    auth: Auth
    r"""Actions related to authentication. Do not use the /auth endpoints in Cribl.Cloud deployments. Instead, follow the instructions at https://docs.cribl.io/stream/api-tutorials/#criblcloud to authenticate for Cribl.Cloud."""
    authorize: Authorize
    r"""Actions related to Authorize"""
    changelog: Changelog
    r"""Actions related to Changelog"""
    system: System
    r"""Actions related to system settings"""
    click_house: ClickHouse
    r"""Actions related to ClickHouse"""
    clui: Clui
    r"""Actions related to CLUI"""
    distributed: Distributed
    r"""Actions related to Distributed"""
    workers: Workers
    r"""Actions related to Workers"""
    expressions: Expressions
    r"""Actions related to expressions"""
    conditions: Conditions
    r"""Actions related to Conditions"""
    diag: DiagSDK
    r"""Actions related to diagnostics"""
    health: Health
    r"""Actions related to REST server health"""
    jobs: Jobs
    r"""Actions related to Jobs"""
    security: Security
    r"""Actions related to Security"""
    licenses: Licenses
    r"""Actions related to licenses. The <code>/licenses</code> endpoints do not apply to Cribl.Cloud deployments."""
    logger: Logger
    r"""Actions related to Logger"""
    logging: Logging
    r"""Actions related to logging"""
    packs: Packs
    r"""Actions related to Packs"""
    processes: Processes
    r"""Actions related to Processes"""
    metrics: Metrics
    r"""Actions related to metrics"""
    ui_state: UIState
    r"""Actions related to UiState"""
    consent: Consent
    r"""Actions related to Consent"""
    trust_policies: TrustPolicies
    r"""Actions related to Trust Policies"""
    edge_containers: EdgeContainers
    r"""Actions related to Edge containers"""
    edge_processes: EdgeProcesses
    r"""Actions related to Edge processes"""
    functions: Functions
    r"""Actions related to functions"""
    collectors: Collectors
    r"""Actions related to Collectors"""
    executors: Executors
    r"""Actions related to Executors"""
    groups: Groups
    r"""Actions related to Groups"""

    def __init__(
        self,
        bearer_auth: Optional[Union[Optional[str], Callable[[], Optional[str]]]] = None,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param bearer_auth: The bearer_auth required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(bearer_auth):
            # pylint: disable=unnecessary-lambda-assignment
            security = lambda: models.SecurityModel(bearer_auth=bearer_auth())
        else:
            security = models.SecurityModel(bearer_auth=bearer_auth)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

        self._init_sdks()

    def _init_sdks(self):
        self.projects = Projects(self.sdk_configuration)
        self.subscriptions = Subscriptions(self.sdk_configuration)
        self.versioning = Versioning(self.sdk_configuration)
        self.git = Git(self.sdk_configuration)
        self.preview = Preview(self.sdk_configuration)
        self.samples = Samples(self.sdk_configuration)
        self.pipelines = Pipelines(self.sdk_configuration)
        self.banners = Banners(self.sdk_configuration)
        self.certificates = Certificates(self.sdk_configuration)
        self.features = Features(self.sdk_configuration)
        self.saved_jobs = SavedJobs(self.sdk_configuration)
        self.keys = Keys(self.sdk_configuration)
        self.messages = Messages(self.sdk_configuration)
        self.notification_targets = NotificationTargets(self.sdk_configuration)
        self.notifications = Notifications(self.sdk_configuration)
        self.policies = Policies(self.sdk_configuration)
        self.roles = Roles(self.sdk_configuration)
        self.scripts = Scripts(self.sdk_configuration)
        self.teams = Teams(self.sdk_configuration)
        self.users = Users(self.sdk_configuration)
        self.lake = Lake(self.sdk_configuration)
        self.dashboard_categories = DashboardCategories(self.sdk_configuration)
        self.usage_groups = UsageGroups(self.sdk_configuration)
        self.datasets = Datasets(self.sdk_configuration)
        self.users_acl = UsersACL(self.sdk_configuration)
        self.teams_acl = TeamsACL(self.sdk_configuration)
        self.appscope_configs = AppscopeConfigs(self.sdk_configuration)
        self.grokfiles = Grokfiles(self.sdk_configuration)
        self.lookups = Lookups(self.sdk_configuration)
        self.parsers = Parsers(self.sdk_configuration)
        self.protobuflibraries = Protobuflibraries(self.sdk_configuration)
        self.regexes = Regexes(self.sdk_configuration)
        self.dashboards = Dashboards(self.sdk_configuration)
        self.macros = Macros(self.sdk_configuration)
        self.saved_queries = SavedQueries(self.sdk_configuration)
        self.search = Search(self.sdk_configuration)
        self.database_connections = DatabaseConnections(self.sdk_configuration)
        self.event_breaker_rules = EventBreakerRules(self.sdk_configuration)
        self.global_variables = GlobalVariables(self.sdk_configuration)
        self.hmac_functions = HmacFunctions(self.sdk_configuration)
        self.inputs = Inputs(self.sdk_configuration)
        self.outputs = Outputs(self.sdk_configuration)
        self.parquetschemas = Parquetschemas(self.sdk_configuration)
        self.profiler = Profiler(self.sdk_configuration)
        self.routes = RoutesSDK(self.sdk_configuration)
        self.schemas = Schemas(self.sdk_configuration)
        self.secrets = Secrets(self.sdk_configuration)
        self.edge_app_scope_processes = EdgeAppScopeProcesses(self.sdk_configuration)
        self.edge = Edge(self.sdk_configuration)
        self.edge_events = EdgeEvents(self.sdk_configuration)
        self.events = Events(self.sdk_configuration)
        self.edge_files = EdgeFiles(self.sdk_configuration)
        self.edge_ls = EdgeLs(self.sdk_configuration)
        self.file = File(self.sdk_configuration)
        self.ingest = Ingest(self.sdk_configuration)
        self.file_sampler = FileSampler(self.sdk_configuration)
        self.kube_logs = KubeLogs(self.sdk_configuration)
        self.kube_proxy = KubeProxy(self.sdk_configuration)
        self.auth = Auth(self.sdk_configuration)
        self.authorize = Authorize(self.sdk_configuration)
        self.changelog = Changelog(self.sdk_configuration)
        self.system = System(self.sdk_configuration)
        self.click_house = ClickHouse(self.sdk_configuration)
        self.clui = Clui(self.sdk_configuration)
        self.distributed = Distributed(self.sdk_configuration)
        self.workers = Workers(self.sdk_configuration)
        self.expressions = Expressions(self.sdk_configuration)
        self.conditions = Conditions(self.sdk_configuration)
        self.diag = DiagSDK(self.sdk_configuration)
        self.health = Health(self.sdk_configuration)
        self.jobs = Jobs(self.sdk_configuration)
        self.security = Security(self.sdk_configuration)
        self.licenses = Licenses(self.sdk_configuration)
        self.logger = Logger(self.sdk_configuration)
        self.logging = Logging(self.sdk_configuration)
        self.packs = Packs(self.sdk_configuration)
        self.processes = Processes(self.sdk_configuration)
        self.metrics = Metrics(self.sdk_configuration)
        self.ui_state = UIState(self.sdk_configuration)
        self.consent = Consent(self.sdk_configuration)
        self.trust_policies = TrustPolicies(self.sdk_configuration)
        self.edge_containers = EdgeContainers(self.sdk_configuration)
        self.edge_processes = EdgeProcesses(self.sdk_configuration)
        self.functions = Functions(self.sdk_configuration)
        self.collectors = Collectors(self.sdk_configuration)
        self.executors = Executors(self.sdk_configuration)
        self.groups = Groups(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
