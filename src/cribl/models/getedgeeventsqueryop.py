"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetEdgeEventsQueryRequestTypedDict(TypedDict):
    files: NotRequired[str]
    r"""Optional parameter, when provided the files and provided offsets are used to look for events."""
    source: NotRequired[str]
    r"""The type of source events to search in the format {type}/{subtype} i.e system_state/hostsfile, system_state/routes, etc..."""
    limit: NotRequired[int]
    r"""Maximum number of log lines to retrieve starting from offset."""
    et: NotRequired[int]
    r"""Epoch timestamp of the earliest event (includes rolled files present on disk)"""
    lt: NotRequired[int]
    r"""Epoch timestamp of the latest event (includes rolled files present on disk)"""
    filter_: NotRequired[str]
    r"""Filter"""


class GetEdgeEventsQueryRequest(BaseModel):
    files: Annotated[
        Optional[str],
        pydantic.Field(alias="Files"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Optional parameter, when provided the files and provided offsets are used to look for events."""

    source: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The type of source events to search in the format {type}/{subtype} i.e system_state/hostsfile, system_state/routes, etc..."""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Maximum number of log lines to retrieve starting from offset."""

    et: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Epoch timestamp of the earliest event (includes rolled files present on disk)"""

    lt: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Epoch timestamp of the latest event (includes rolled files present on disk)"""

    filter_: Annotated[
        Optional[str],
        pydantic.Field(alias="filter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter"""


class GetEdgeEventsQueryResponseBodyTypedDict(TypedDict):
    r"""a list of any objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[Dict[str, Any]]]


class GetEdgeEventsQueryResponseBody(BaseModel):
    r"""a list of any objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Dict[str, Any]]] = None
