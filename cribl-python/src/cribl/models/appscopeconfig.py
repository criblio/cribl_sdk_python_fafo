"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appscopetransport import AppscopeTransport, AppscopeTransportTypedDict
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AppscopeConfigCriblTypedDict(TypedDict):
    authtoken: NotRequired[str]
    enable: NotRequired[bool]
    transport: NotRequired[AppscopeTransportTypedDict]
    use_scope_source_transport: NotRequired[bool]


class AppscopeConfigCribl(BaseModel):
    authtoken: Optional[str] = None

    enable: Optional[bool] = None

    transport: Optional[AppscopeTransport] = None

    use_scope_source_transport: Annotated[
        Optional[bool], pydantic.Field(alias="useScopeSourceTransport")
    ] = None


class AppscopeConfigFormatTypedDict(TypedDict):
    enhancefs: bool
    maxeventpersec: float


class AppscopeConfigFormat(BaseModel):
    enhancefs: bool

    maxeventpersec: float


class AppscopeConfigType(str, Enum):
    NDJSON = "ndjson"


class WatchTypedDict(TypedDict):
    type: str
    allowbinary: NotRequired[bool]
    enabled: NotRequired[bool]
    field: NotRequired[str]
    headers: NotRequired[str]
    name: NotRequired[str]
    value: NotRequired[str]


class Watch(BaseModel):
    type: str

    allowbinary: Optional[bool] = None

    enabled: Optional[bool] = None

    field: Optional[str] = None

    headers: Optional[str] = None

    name: Optional[str] = None

    value: Optional[str] = None


class EventTypedDict(TypedDict):
    enable: bool
    format_: AppscopeConfigFormatTypedDict
    transport: AppscopeTransportTypedDict
    type: AppscopeConfigType
    watch: List[WatchTypedDict]


class Event(BaseModel):
    enable: bool

    format_: Annotated[AppscopeConfigFormat, pydantic.Field(alias="format")]

    transport: AppscopeTransport

    type: AppscopeConfigType

    watch: List[Watch]


class Level(str, Enum):
    ERROR = "error"
    DEBUG = "debug"
    INFO = "info"
    WARNING = "warning"
    NONE = "none"


class LogTypedDict(TypedDict):
    level: NotRequired[Level]
    transport: NotRequired[AppscopeTransportTypedDict]


class Log(BaseModel):
    level: Optional[Level] = None

    transport: Optional[AppscopeTransport] = None


class LibscopeTypedDict(TypedDict):
    commanddir: NotRequired[str]
    configevent: NotRequired[bool]
    log: NotRequired[LogTypedDict]
    summaryperiod: NotRequired[float]


class Libscope(BaseModel):
    commanddir: Optional[str] = None

    configevent: Optional[bool] = None

    log: Optional[Log] = None

    summaryperiod: Optional[float] = None


class AppscopeConfigMetricFormatTypedDict(TypedDict):
    statsdmaxlen: NotRequired[float]
    statsdprefix: NotRequired[str]
    type: NotRequired[str]
    verbosity: NotRequired[float]


class AppscopeConfigMetricFormat(BaseModel):
    statsdmaxlen: Optional[float] = None

    statsdprefix: Optional[str] = None

    type: Optional[str] = None

    verbosity: Optional[float] = None


class MetricTypedDict(TypedDict):
    enable: bool
    format_: AppscopeConfigMetricFormatTypedDict
    transport: AppscopeTransportTypedDict
    watch: List[str]


class Metric(BaseModel):
    enable: bool

    format_: Annotated[AppscopeConfigMetricFormat, pydantic.Field(alias="format")]

    transport: AppscopeTransport

    watch: List[str]


class PayloadTypedDict(TypedDict):
    dir: str
    enable: bool


class Payload(BaseModel):
    dir: str

    enable: bool


class ProtocolTypedDict(TypedDict):
    binary: bool
    detect: bool
    len: float
    name: str
    payload: bool
    regex: str


class Protocol(BaseModel):
    binary: bool

    detect: bool

    len: float

    name: str

    payload: bool

    regex: str


class TagsTypedDict(TypedDict):
    key: str
    value: str


class Tags(BaseModel):
    key: str

    value: str


class AppscopeConfigTypedDict(TypedDict):
    cribl: NotRequired[AppscopeConfigCriblTypedDict]
    event: NotRequired[EventTypedDict]
    libscope: NotRequired[LibscopeTypedDict]
    metric: NotRequired[MetricTypedDict]
    payload: NotRequired[PayloadTypedDict]
    protocol: NotRequired[List[ProtocolTypedDict]]
    tags: NotRequired[List[TagsTypedDict]]


class AppscopeConfig(BaseModel):
    cribl: Optional[AppscopeConfigCribl] = None

    event: Optional[Event] = None

    libscope: Optional[Libscope] = None

    metric: Optional[Metric] = None

    payload: Optional[Payload] = None

    protocol: Optional[List[Protocol]] = None

    tags: Optional[List[Tags]] = None
