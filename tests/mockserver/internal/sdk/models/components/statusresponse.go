// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type StageDetailStatus string

const (
	StageDetailStatusNew       StageDetailStatus = "new"
	StageDetailStatusFailed    StageDetailStatus = "failed"
	StageDetailStatusRunning   StageDetailStatus = "running"
	StageDetailStatusCompleted StageDetailStatus = "completed"
	StageDetailStatusCanceled  StageDetailStatus = "canceled"
	StageDetailStatusQueued    StageDetailStatus = "queued"
)

func (e StageDetailStatus) ToPointer() *StageDetailStatus {
	return &e
}
func (e *StageDetailStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "failed":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		fallthrough
	case "canceled":
		fallthrough
	case "queued":
		*e = StageDetailStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StageDetailStatus: %v", v)
	}
}

type StageDetail struct {
	CacheStatusByDatasetID any               `json:"cacheStatusByDatasetId"`
	StageID                string            `json:"stageId"`
	Status                 StageDetailStatus `json:"status"`
}

func (o *StageDetail) GetCacheStatusByDatasetID() any {
	if o == nil {
		return nil
	}
	return o.CacheStatusByDatasetID
}

func (o *StageDetail) GetStageID() string {
	if o == nil {
		return ""
	}
	return o.StageID
}

func (o *StageDetail) GetStatus() StageDetailStatus {
	if o == nil {
		return StageDetailStatus("")
	}
	return o.Status
}

type StatusResponseStatus string

const (
	StatusResponseStatusNew       StatusResponseStatus = "new"
	StatusResponseStatusFailed    StatusResponseStatus = "failed"
	StatusResponseStatusRunning   StatusResponseStatus = "running"
	StatusResponseStatusCompleted StatusResponseStatus = "completed"
	StatusResponseStatusCanceled  StatusResponseStatus = "canceled"
	StatusResponseStatusQueued    StatusResponseStatus = "queued"
)

func (e StatusResponseStatus) ToPointer() *StatusResponseStatus {
	return &e
}
func (e *StatusResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "new":
		fallthrough
	case "failed":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		fallthrough
	case "canceled":
		fallthrough
	case "queued":
		*e = StatusResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusResponseStatus: %v", v)
	}
}

type StatusResponse struct {
	BytesIn         *float64             `json:"bytesIn,omitempty"`
	BytesSkipped    *float64             `json:"bytesSkipped,omitempty"`
	EventsFound     *float64             `json:"eventsFound,omitempty"`
	EventsIn        *float64             `json:"eventsIn,omitempty"`
	EventsSkipped   *float64             `json:"eventsSkipped,omitempty"`
	ObjectsFound    *float64             `json:"objectsFound,omitempty"`
	ObjectsSearched *float64             `json:"objectsSearched,omitempty"`
	ObjectsSkipped  *float64             `json:"objectsSkipped,omitempty"`
	StageDetails    []StageDetail        `json:"stageDetails,omitempty"`
	Status          StatusResponseStatus `json:"status"`
	TimeCompleted   *float64             `json:"timeCompleted,omitempty"`
	TimeCreated     float64              `json:"timeCreated"`
	TimeNow         *float64             `json:"timeNow,omitempty"`
	TimeStarted     *float64             `json:"timeStarted,omitempty"`
}

func (o *StatusResponse) GetBytesIn() *float64 {
	if o == nil {
		return nil
	}
	return o.BytesIn
}

func (o *StatusResponse) GetBytesSkipped() *float64 {
	if o == nil {
		return nil
	}
	return o.BytesSkipped
}

func (o *StatusResponse) GetEventsFound() *float64 {
	if o == nil {
		return nil
	}
	return o.EventsFound
}

func (o *StatusResponse) GetEventsIn() *float64 {
	if o == nil {
		return nil
	}
	return o.EventsIn
}

func (o *StatusResponse) GetEventsSkipped() *float64 {
	if o == nil {
		return nil
	}
	return o.EventsSkipped
}

func (o *StatusResponse) GetObjectsFound() *float64 {
	if o == nil {
		return nil
	}
	return o.ObjectsFound
}

func (o *StatusResponse) GetObjectsSearched() *float64 {
	if o == nil {
		return nil
	}
	return o.ObjectsSearched
}

func (o *StatusResponse) GetObjectsSkipped() *float64 {
	if o == nil {
		return nil
	}
	return o.ObjectsSkipped
}

func (o *StatusResponse) GetStageDetails() []StageDetail {
	if o == nil {
		return nil
	}
	return o.StageDetails
}

func (o *StatusResponse) GetStatus() StatusResponseStatus {
	if o == nil {
		return StatusResponseStatus("")
	}
	return o.Status
}

func (o *StatusResponse) GetTimeCompleted() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeCompleted
}

func (o *StatusResponse) GetTimeCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.TimeCreated
}

func (o *StatusResponse) GetTimeNow() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeNow
}

func (o *StatusResponse) GetTimeStarted() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeStarted
}
