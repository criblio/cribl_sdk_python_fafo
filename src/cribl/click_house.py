"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from cribl import models, utils
from cribl._hooks import HookContext
from cribl.types import OptionalNullable, UNSET
from cribl.utils import get_security_from_env
from typing import Any, List, Mapping, Optional, Union


class ClickHouse(BaseSDK):
    r"""Actions related to ClickHouse"""

    def create_output_click_house_describe_table(
        self,
        *,
        async_inserts: bool,
        database: str,
        flush_period_sec: float,
        format_: models.Format,
        load_balanced: bool,
        mapping_type: models.MappingType,
        table_name: str,
        url: str,
        auth: Optional[
            Union[models.HTTPOutAuthConfig, models.HTTPOutAuthConfigTypedDict]
        ] = None,
        auth_type: Optional[models.CHOutConfigAuthType] = None,
        column_mappings: Optional[
            Union[
                List[models.CHOutConfigColumnMappings],
                List[models.CHOutConfigColumnMappingsTypedDict],
            ]
        ] = None,
        compress: Optional[bool] = None,
        concurrency: Optional[float] = None,
        dump_format_errors_to_disk: Optional[bool] = None,
        exclude_mapping_fields: Optional[List[str]] = None,
        extra_http_headers: Optional[
            Union[List[models.NameValue], List[models.NameValueTypedDict]]
        ] = None,
        extra_params: Optional[
            Union[
                List[models.HTTPOutExtraParamConfig],
                List[models.HTTPOutExtraParamConfigTypedDict],
            ]
        ] = None,
        failed_request_logging_mode: Optional[str] = None,
        keep_alive: Optional[bool] = None,
        max_connection_reuse_sec: Optional[float] = None,
        max_payload_events: Optional[float] = None,
        max_payload_size_kb: Optional[float] = None,
        max_sockets: Optional[float] = None,
        method: Optional[str] = None,
        password: Optional[str] = None,
        reject_unauthorized: Optional[bool] = None,
        response_honor_retry_after_header: Optional[bool] = None,
        response_retry_settings: Optional[
            Union[
                List[models.HTTPOutResponseRetryConfig],
                List[models.HTTPOutResponseRetryConfigTypedDict],
            ]
        ] = None,
        safe_headers: Optional[List[str]] = None,
        sql_username: Optional[str] = None,
        table_name_expression: Optional[str] = None,
        timeout_retry_settings: Optional[
            Union[models.RetryBackoffOptions, models.RetryBackoffOptionsTypedDict]
        ] = None,
        timeout_sec: Optional[float] = None,
        tls: Optional[
            Union[models.TLSClientParams, models.TLSClientParamsTypedDict]
        ] = None,
        token: Optional[str] = None,
        total_memory_limit_kb: Optional[float] = None,
        urls: Optional[
            Union[List[models.CHOutConfigUrls], List[models.CHOutConfigUrlsTypedDict]]
        ] = None,
        use_round_robin_dns: Optional[bool] = None,
        username: Optional[str] = None,
        wait_for_inserts: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateOutputClickHouseDescribeTableResponseBody:
        r"""Retrieve the description of the configured ClickHouse table

        Retrieve the description of the configured ClickHouse table

        :param async_inserts:
        :param database:
        :param flush_period_sec:
        :param format_:
        :param load_balanced:
        :param mapping_type:
        :param table_name:
        :param url:
        :param auth:
        :param auth_type:
        :param column_mappings:
        :param compress:
        :param concurrency:
        :param dump_format_errors_to_disk:
        :param exclude_mapping_fields:
        :param extra_http_headers:
        :param extra_params:
        :param failed_request_logging_mode:
        :param keep_alive:
        :param max_connection_reuse_sec:
        :param max_payload_events:
        :param max_payload_size_kb:
        :param max_sockets:
        :param method:
        :param password:
        :param reject_unauthorized:
        :param response_honor_retry_after_header:
        :param response_retry_settings:
        :param safe_headers:
        :param sql_username:
        :param table_name_expression:
        :param timeout_retry_settings:
        :param timeout_sec:
        :param tls:
        :param token:
        :param total_memory_limit_kb:
        :param urls:
        :param use_round_robin_dns:
        :param username:
        :param wait_for_inserts:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CHOutConfig(
            async_inserts=async_inserts,
            auth=utils.get_pydantic_model(auth, Optional[models.HTTPOutAuthConfig]),
            auth_type=auth_type,
            column_mappings=utils.get_pydantic_model(
                column_mappings, Optional[List[models.CHOutConfigColumnMappings]]
            ),
            compress=compress,
            concurrency=concurrency,
            database=database,
            dump_format_errors_to_disk=dump_format_errors_to_disk,
            exclude_mapping_fields=exclude_mapping_fields,
            extra_http_headers=utils.get_pydantic_model(
                extra_http_headers, Optional[List[models.NameValue]]
            ),
            extra_params=utils.get_pydantic_model(
                extra_params, Optional[List[models.HTTPOutExtraParamConfig]]
            ),
            failed_request_logging_mode=failed_request_logging_mode,
            flush_period_sec=flush_period_sec,
            format_=format_,
            keep_alive=keep_alive,
            load_balanced=load_balanced,
            mapping_type=mapping_type,
            max_connection_reuse_sec=max_connection_reuse_sec,
            max_payload_events=max_payload_events,
            max_payload_size_kb=max_payload_size_kb,
            max_sockets=max_sockets,
            method=method,
            password=password,
            reject_unauthorized=reject_unauthorized,
            response_honor_retry_after_header=response_honor_retry_after_header,
            response_retry_settings=utils.get_pydantic_model(
                response_retry_settings,
                Optional[List[models.HTTPOutResponseRetryConfig]],
            ),
            safe_headers=safe_headers,
            sql_username=sql_username,
            table_name=table_name,
            table_name_expression=table_name_expression,
            timeout_retry_settings=utils.get_pydantic_model(
                timeout_retry_settings, Optional[models.RetryBackoffOptions]
            ),
            timeout_sec=timeout_sec,
            tls=utils.get_pydantic_model(tls, Optional[models.TLSClientParams]),
            token=token,
            total_memory_limit_kb=total_memory_limit_kb,
            url=url,
            urls=utils.get_pydantic_model(urls, Optional[List[models.CHOutConfigUrls]]),
            use_round_robin_dns=use_round_robin_dns,
            username=username,
            wait_for_inserts=wait_for_inserts,
        )

        req = self._build_request(
            method="POST",
            path="/output/click-house/describe-table",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CHOutConfig
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="createOutputClickHouseDescribeTable",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.SecurityModel
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CreateOutputClickHouseDescribeTableResponseBody
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(http_res.text, models.ErrorData)
            raise models.Error(data=response_data)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def create_output_click_house_describe_table_async(
        self,
        *,
        async_inserts: bool,
        database: str,
        flush_period_sec: float,
        format_: models.Format,
        load_balanced: bool,
        mapping_type: models.MappingType,
        table_name: str,
        url: str,
        auth: Optional[
            Union[models.HTTPOutAuthConfig, models.HTTPOutAuthConfigTypedDict]
        ] = None,
        auth_type: Optional[models.CHOutConfigAuthType] = None,
        column_mappings: Optional[
            Union[
                List[models.CHOutConfigColumnMappings],
                List[models.CHOutConfigColumnMappingsTypedDict],
            ]
        ] = None,
        compress: Optional[bool] = None,
        concurrency: Optional[float] = None,
        dump_format_errors_to_disk: Optional[bool] = None,
        exclude_mapping_fields: Optional[List[str]] = None,
        extra_http_headers: Optional[
            Union[List[models.NameValue], List[models.NameValueTypedDict]]
        ] = None,
        extra_params: Optional[
            Union[
                List[models.HTTPOutExtraParamConfig],
                List[models.HTTPOutExtraParamConfigTypedDict],
            ]
        ] = None,
        failed_request_logging_mode: Optional[str] = None,
        keep_alive: Optional[bool] = None,
        max_connection_reuse_sec: Optional[float] = None,
        max_payload_events: Optional[float] = None,
        max_payload_size_kb: Optional[float] = None,
        max_sockets: Optional[float] = None,
        method: Optional[str] = None,
        password: Optional[str] = None,
        reject_unauthorized: Optional[bool] = None,
        response_honor_retry_after_header: Optional[bool] = None,
        response_retry_settings: Optional[
            Union[
                List[models.HTTPOutResponseRetryConfig],
                List[models.HTTPOutResponseRetryConfigTypedDict],
            ]
        ] = None,
        safe_headers: Optional[List[str]] = None,
        sql_username: Optional[str] = None,
        table_name_expression: Optional[str] = None,
        timeout_retry_settings: Optional[
            Union[models.RetryBackoffOptions, models.RetryBackoffOptionsTypedDict]
        ] = None,
        timeout_sec: Optional[float] = None,
        tls: Optional[
            Union[models.TLSClientParams, models.TLSClientParamsTypedDict]
        ] = None,
        token: Optional[str] = None,
        total_memory_limit_kb: Optional[float] = None,
        urls: Optional[
            Union[List[models.CHOutConfigUrls], List[models.CHOutConfigUrlsTypedDict]]
        ] = None,
        use_round_robin_dns: Optional[bool] = None,
        username: Optional[str] = None,
        wait_for_async_inserts: Optional[bool] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.CreateOutputClickHouseDescribeTableResponseBody:
        r"""Retrieve the description of the configured ClickHouse table

        Retrieve the description of the configured ClickHouse table

        :param async_inserts:
        :param database:
        :param flush_period_sec:
        :param format_:
        :param load_balanced:
        :param mapping_type:
        :param table_name:
        :param url:
        :param auth:
        :param auth_type:
        :param column_mappings:
        :param compress:
        :param concurrency:
        :param dump_format_errors_to_disk:
        :param exclude_mapping_fields:
        :param extra_http_headers:
        :param extra_params:
        :param failed_request_logging_mode:
        :param keep_alive:
        :param max_connection_reuse_sec:
        :param max_payload_events:
        :param max_payload_size_kb:
        :param max_sockets:
        :param method:
        :param password:
        :param reject_unauthorized:
        :param response_honor_retry_after_header:
        :param response_retry_settings:
        :param safe_headers:
        :param sql_username:
        :param table_name_expression:
        :param timeout_retry_settings:
        :param timeout_sec:
        :param tls:
        :param token:
        :param total_memory_limit_kb:
        :param urls:
        :param use_round_robin_dns:
        :param username:
        :param wait_for_async_inserts:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CHOutConfig(
            async_inserts=async_inserts,
            auth=utils.get_pydantic_model(auth, Optional[models.HTTPOutAuthConfig]),
            auth_type=auth_type,
            column_mappings=utils.get_pydantic_model(
                column_mappings, Optional[List[models.CHOutConfigColumnMappings]]
            ),
            compress=compress,
            concurrency=concurrency,
            database=database,
            dump_format_errors_to_disk=dump_format_errors_to_disk,
            exclude_mapping_fields=exclude_mapping_fields,
            extra_http_headers=utils.get_pydantic_model(
                extra_http_headers, Optional[List[models.NameValue]]
            ),
            extra_params=utils.get_pydantic_model(
                extra_params, Optional[List[models.HTTPOutExtraParamConfig]]
            ),
            failed_request_logging_mode=failed_request_logging_mode,
            flush_period_sec=flush_period_sec,
            format_=format_,
            keep_alive=keep_alive,
            load_balanced=load_balanced,
            mapping_type=mapping_type,
            max_connection_reuse_sec=max_connection_reuse_sec,
            max_payload_events=max_payload_events,
            max_payload_size_kb=max_payload_size_kb,
            max_sockets=max_sockets,
            method=method,
            password=password,
            reject_unauthorized=reject_unauthorized,
            response_honor_retry_after_header=response_honor_retry_after_header,
            response_retry_settings=utils.get_pydantic_model(
                response_retry_settings,
                Optional[List[models.HTTPOutResponseRetryConfig]],
            ),
            safe_headers=safe_headers,
            sql_username=sql_username,
            table_name=table_name,
            table_name_expression=table_name_expression,
            timeout_retry_settings=utils.get_pydantic_model(
                timeout_retry_settings, Optional[models.RetryBackoffOptions]
            ),
            timeout_sec=timeout_sec,
            tls=utils.get_pydantic_model(tls, Optional[models.TLSClientParams]),
            token=token,
            total_memory_limit_kb=total_memory_limit_kb,
            url=url,
            urls=utils.get_pydantic_model(urls, Optional[List[models.CHOutConfigUrls]]),
            use_round_robin_dns=use_round_robin_dns,
            username=username,
            wait_for_async_inserts=wait_for_async_inserts,
        )

        req = self._build_request_async(
            method="POST",
            path="/output/click-house/describe-table",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", models.CHOutConfig
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="createOutputClickHouseDescribeTable",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.SecurityModel
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(
                http_res.text, models.CreateOutputClickHouseDescribeTableResponseBody
            )
        if utils.match_response(http_res, "500", "application/json"):
            response_data = utils.unmarshal_json(http_res.text, models.ErrorData)
            raise models.Error(data=response_data)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
