"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .auth_provider import AuthProvider
from .awskmsserviceconfig import AWSKMSServiceConfig, AWSKMSServiceConfigTypedDict
from .secret_provider import SecretProvider
from .vaultkmstlsclientconfig import (
    VaultKMSTLSClientConfig,
    VaultKMSTLSClientConfigTypedDict,
)
from cribl.types import BaseModel
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class Auth2TypedDict(TypedDict):
    assume_role_arn: NotRequired[str]
    assume_role_external_id: NotRequired[str]
    aws_api_key: NotRequired[str]
    aws_authentication_method: NotRequired[str]
    aws_secret_key: NotRequired[str]
    enable_assume_role: NotRequired[bool]


class Auth2(BaseModel):
    assume_role_arn: Annotated[Optional[str], pydantic.Field(alias="assumeRoleArn")] = (
        None
    )

    assume_role_external_id: Annotated[
        Optional[str], pydantic.Field(alias="assumeRoleExternalId")
    ] = None

    aws_api_key: Annotated[Optional[str], pydantic.Field(alias="awsApiKey")] = None

    aws_authentication_method: Annotated[
        Optional[str], pydantic.Field(alias="awsAuthenticationMethod")
    ] = None

    aws_secret_key: Annotated[Optional[str], pydantic.Field(alias="awsSecretKey")] = (
        None
    )

    enable_assume_role: Annotated[
        Optional[bool], pydantic.Field(alias="enableAssumeRole")
    ] = None


class Auth1TypedDict(TypedDict):
    provider: AuthProvider
    vault_awsiam_server_id: str
    assume_role_arn: NotRequired[str]
    assume_role_external_id: NotRequired[str]
    aws_api_key: NotRequired[str]
    aws_authentication_method: NotRequired[str]
    aws_secret_key: NotRequired[str]
    enable_assume_role: NotRequired[bool]
    token: NotRequired[str]
    vault_role: NotRequired[str]


class Auth1(BaseModel):
    provider: AuthProvider

    vault_awsiam_server_id: Annotated[str, pydantic.Field(alias="vaultAWSIAMServerID")]

    assume_role_arn: Annotated[Optional[str], pydantic.Field(alias="assumeRoleArn")] = (
        None
    )

    assume_role_external_id: Annotated[
        Optional[str], pydantic.Field(alias="assumeRoleExternalId")
    ] = None

    aws_api_key: Annotated[Optional[str], pydantic.Field(alias="awsApiKey")] = None

    aws_authentication_method: Annotated[
        Optional[str], pydantic.Field(alias="awsAuthenticationMethod")
    ] = None

    aws_secret_key: Annotated[Optional[str], pydantic.Field(alias="awsSecretKey")] = (
        None
    )

    enable_assume_role: Annotated[
        Optional[bool], pydantic.Field(alias="enableAssumeRole")
    ] = None

    token: Optional[str] = None

    vault_role: Annotated[Optional[str], pydantic.Field(alias="vaultRole")] = None


KMSProviderConfigAuthTypedDict = TypeAliasType(
    "KMSProviderConfigAuthTypedDict", Union[Auth2TypedDict, Auth1TypedDict]
)


KMSProviderConfigAuth = TypeAliasType("KMSProviderConfigAuth", Union[Auth2, Auth1])


class KMSProviderConfigTypedDict(TypedDict):
    enable_health_check: bool
    provider: SecretProvider
    auth: NotRequired[KMSProviderConfigAuthTypedDict]
    health_check_endpoint: NotRequired[str]
    namespace: NotRequired[str]
    secret_dir: NotRequired[str]
    service: NotRequired[AWSKMSServiceConfigTypedDict]
    tls: NotRequired[VaultKMSTLSClientConfigTypedDict]
    url: NotRequired[str]


class KMSProviderConfig(BaseModel):
    enable_health_check: Annotated[bool, pydantic.Field(alias="enableHealthCheck")]

    provider: SecretProvider

    auth: Optional[KMSProviderConfigAuth] = None

    health_check_endpoint: Annotated[
        Optional[str], pydantic.Field(alias="healthCheckEndpoint")
    ] = None

    namespace: Optional[str] = None

    secret_dir: Annotated[Optional[str], pydantic.Field(alias="secretDir")] = None

    service: Optional[AWSKMSServiceConfig] = None

    tls: Optional[VaultKMSTLSClientConfig] = None

    url: Optional[str] = None
