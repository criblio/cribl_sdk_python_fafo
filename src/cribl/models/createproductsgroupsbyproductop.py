"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .configgroup import ConfigGroup, ConfigGroupTypedDict
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from enum import Enum
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateProductsGroupsByProductPathParamProduct(str, Enum):
    r"""Cribl Product"""

    STREAM = "stream"
    EDGE = "edge"


class CreateProductsGroupsByProductRequestTypedDict(TypedDict):
    product: CreateProductsGroupsByProductPathParamProduct
    r"""Cribl Product"""
    config_group: ConfigGroupTypedDict
    r"""ConfigGroup object"""


class CreateProductsGroupsByProductRequest(BaseModel):
    product: Annotated[
        CreateProductsGroupsByProductPathParamProduct,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Cribl Product"""

    config_group: Annotated[
        ConfigGroup,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""ConfigGroup object"""


class CreateProductsGroupsByProductResponseBodyTypedDict(TypedDict):
    r"""a list of ConfigGroup objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[ConfigGroupTypedDict]]


class CreateProductsGroupsByProductResponseBody(BaseModel):
    r"""a list of ConfigGroup objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[ConfigGroup]] = None
