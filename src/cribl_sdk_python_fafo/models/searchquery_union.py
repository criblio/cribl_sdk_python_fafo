"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .panelquerydefinition import PanelQueryDefinition, PanelQueryDefinitionTypedDict
from .savessearchrunmode import SavesSearchRunMode
from cribl_sdk_python_fafo.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


SearchQueryEarliest2TypedDict = TypeAliasType(
    "SearchQueryEarliest2TypedDict", Union[str, float]
)


SearchQueryEarliest2 = TypeAliasType("SearchQueryEarliest2", Union[str, float])


SearchQueryLatest2TypedDict = TypeAliasType(
    "SearchQueryLatest2TypedDict", Union[str, float]
)


SearchQueryLatest2 = TypeAliasType("SearchQueryLatest2", Union[str, float])


class TypeMetric(str, Enum):
    METRIC = "metric"


class SearchQueryMetricTypedDict(TypedDict):
    earliest: SearchQueryEarliest2TypedDict
    latest: SearchQueryLatest2TypedDict
    queries: List[PanelQueryDefinitionTypedDict]
    type: TypeMetric
    is_monitoring: NotRequired[bool]
    timezone: NotRequired[str]


class SearchQueryMetric(BaseModel):
    earliest: SearchQueryEarliest2

    latest: SearchQueryLatest2

    queries: List[PanelQueryDefinition]

    type: TypeMetric

    is_monitoring: Annotated[Optional[bool], pydantic.Field(alias="isMonitoring")] = (
        None
    )

    timezone: Optional[str] = None


class SearchQueryTypedDict(TypedDict):
    pass


class SearchQuery(BaseModel):
    pass


class TypeValues(str, Enum):
    VALUES = "values"


class SearchQueryValuesTypedDict(TypedDict):
    type: TypeValues
    values: List[str]


class SearchQueryValues(BaseModel):
    type: TypeValues

    values: List[str]


SearchQueryEarliest1TypedDict = TypeAliasType(
    "SearchQueryEarliest1TypedDict", Union[str, float]
)


SearchQueryEarliest1 = TypeAliasType("SearchQueryEarliest1", Union[str, float])


SearchQueryLatest1TypedDict = TypeAliasType(
    "SearchQueryLatest1TypedDict", Union[str, float]
)


SearchQueryLatest1 = TypeAliasType("SearchQueryLatest1", Union[str, float])


class TypeInline(str, Enum):
    INLINE = "inline"


class SearchQueryInlineTypedDict(TypedDict):
    earliest: SearchQueryEarliest1TypedDict
    latest: SearchQueryLatest1TypedDict
    query: str
    type: TypeInline
    parent_search_id: NotRequired[str]
    sample_rate: NotRequired[float]
    timezone: NotRequired[str]


class SearchQueryInline(BaseModel):
    earliest: SearchQueryEarliest1

    latest: SearchQueryLatest1

    query: str

    type: TypeInline

    parent_search_id: Annotated[
        Optional[str], pydantic.Field(alias="parentSearchId")
    ] = None

    sample_rate: Annotated[Optional[float], pydantic.Field(alias="sampleRate")] = None

    timezone: Optional[str] = None


class TypeSaved(str, Enum):
    SAVED = "saved"


class SearchQuerySavedTypedDict(TypedDict):
    query_id: str
    type: TypeSaved
    query: NotRequired[str]
    run_mode: NotRequired[SavesSearchRunMode]


class SearchQuerySaved(BaseModel):
    query_id: Annotated[str, pydantic.Field(alias="queryId")]

    type: TypeSaved

    query: Optional[str] = None

    run_mode: Annotated[
        Optional[SavesSearchRunMode], pydantic.Field(alias="runMode")
    ] = None


SearchQueryUnionTypedDict = TypeAliasType(
    "SearchQueryUnionTypedDict",
    Union[
        SearchQueryTypedDict,
        SearchQueryValuesTypedDict,
        SearchQuerySavedTypedDict,
        SearchQueryMetricTypedDict,
        SearchQueryInlineTypedDict,
    ],
)


SearchQueryUnion = TypeAliasType(
    "SearchQueryUnion",
    Union[
        SearchQuery,
        SearchQueryValues,
        SearchQuerySaved,
        SearchQueryMetric,
        SearchQueryInline,
    ],
)
