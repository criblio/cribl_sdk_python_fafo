"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, PathParamMetadata
from enum import Enum
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class DeleteProductsUsersCacheByProductPathParamProduct(str, Enum):
    r"""product by which to filter members"""

    STREAM = "stream"
    EDGE = "edge"
    SEARCH = "search"
    LAKE = "lake"


class DeleteProductsUsersCacheByProductRequestTypedDict(TypedDict):
    product: DeleteProductsUsersCacheByProductPathParamProduct
    r"""product by which to filter members"""


class DeleteProductsUsersCacheByProductRequest(BaseModel):
    product: Annotated[
        DeleteProductsUsersCacheByProductPathParamProduct,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""product by which to filter members"""


class DeleteProductsUsersCacheByProductResponseBodyTypedDict(TypedDict):
    r"""a list of any objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[Dict[str, Any]]]


class DeleteProductsUsersCacheByProductResponseBody(BaseModel):
    r"""a list of any objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Dict[str, Any]]] = None
