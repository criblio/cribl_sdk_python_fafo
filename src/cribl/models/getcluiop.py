"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .cluiitem import CluiItem, CluiItemTypedDict
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Context(str, Enum):
    r"""Search query context"""

    STREAM = "stream"
    EDGE = "edge"


class GetCluiRequestTypedDict(TypedDict):
    query: str
    r"""Search query"""
    context: NotRequired[Context]
    r"""Search query context"""


class GetCluiRequest(BaseModel):
    query: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""Search query"""

    context: Annotated[
        Optional[Context],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Search query context"""


class GetCluiResponseBodyTypedDict(TypedDict):
    r"""a list of CluiItem objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[CluiItemTypedDict]]


class GetCluiResponseBody(BaseModel):
    r"""a list of CluiItem objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[CluiItem]] = None
