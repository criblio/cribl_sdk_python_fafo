"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dashboardlayout import DashboardLayout, DashboardLayoutTypedDict
from .inputelementtype import InputElementType
from .searchquery_union import SearchQueryUnion, SearchQueryUnionTypedDict
from .visualizationelementtype import (
    VisualizationElementType,
    VisualizationElementTypeTypedDict,
)
from cribl_sdk_python_fafo.types import BaseModel
from enum import Enum
import pydantic
from typing import Any, Dict, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class DashboardElementType(str, Enum):
    MARKDOWN_DEFAULT = "markdown.default"


class VariantMarkdown(str, Enum):
    MARKDOWN = "markdown"


class DashboardElementMarkdownTypedDict(TypedDict):
    id: str
    layout: DashboardLayoutTypedDict
    type: DashboardElementType
    variant: VariantMarkdown
    description: NotRequired[str]
    empty: NotRequired[bool]
    hide_panel: NotRequired[bool]
    horizontal_chart: NotRequired[bool]
    index: NotRequired[float]
    title: NotRequired[str]


class DashboardElementMarkdown(BaseModel):
    id: str

    layout: DashboardLayout

    type: DashboardElementType

    variant: VariantMarkdown

    description: Optional[str] = None

    empty: Optional[bool] = None

    hide_panel: Annotated[Optional[bool], pydantic.Field(alias="hidePanel")] = None

    horizontal_chart: Annotated[
        Optional[bool], pydantic.Field(alias="horizontalChart")
    ] = None

    index: Optional[float] = None

    title: Optional[str] = None


class VariantInput(str, Enum):
    INPUT = "input"


class DashboardElementInputTypedDict(TypedDict):
    id: str
    input_id: str
    layout: DashboardLayoutTypedDict
    type: InputElementType
    variant: VariantInput
    description: NotRequired[str]
    empty: NotRequired[bool]
    hide_panel: NotRequired[bool]
    horizontal_chart: NotRequired[bool]
    index: NotRequired[float]
    search: NotRequired[SearchQueryUnionTypedDict]
    title: NotRequired[str]
    value: NotRequired[Dict[str, Any]]


class DashboardElementInput(BaseModel):
    id: str

    input_id: Annotated[str, pydantic.Field(alias="inputId")]

    layout: DashboardLayout

    type: InputElementType

    variant: VariantInput

    description: Optional[str] = None

    empty: Optional[bool] = None

    hide_panel: Annotated[Optional[bool], pydantic.Field(alias="hidePanel")] = None

    horizontal_chart: Annotated[
        Optional[bool], pydantic.Field(alias="horizontalChart")
    ] = None

    index: Optional[float] = None

    search: Optional[SearchQueryUnion] = None

    title: Optional[str] = None

    value: Optional[Dict[str, Any]] = None


class VariantVisualization(str, Enum):
    VISUALIZATION = "visualization"


class DashboardElementVisualizationTypedDict(TypedDict):
    id: str
    layout: DashboardLayoutTypedDict
    search: SearchQueryUnionTypedDict
    type: VisualizationElementTypeTypedDict
    description: NotRequired[str]
    empty: NotRequired[bool]
    hide_panel: NotRequired[bool]
    horizontal_chart: NotRequired[bool]
    index: NotRequired[float]
    title: NotRequired[str]
    variant: NotRequired[VariantVisualization]


class DashboardElementVisualization(BaseModel):
    id: str

    layout: DashboardLayout

    search: SearchQueryUnion

    type: VisualizationElementType

    description: Optional[str] = None

    empty: Optional[bool] = None

    hide_panel: Annotated[Optional[bool], pydantic.Field(alias="hidePanel")] = None

    horizontal_chart: Annotated[
        Optional[bool], pydantic.Field(alias="horizontalChart")
    ] = None

    index: Optional[float] = None

    title: Optional[str] = None

    variant: Optional[VariantVisualization] = None


DashboardElementTypedDict = TypeAliasType(
    "DashboardElementTypedDict",
    Union[
        DashboardElementMarkdownTypedDict,
        DashboardElementVisualizationTypedDict,
        DashboardElementInputTypedDict,
    ],
)


DashboardElement = TypeAliasType(
    "DashboardElement",
    Union[
        DashboardElementMarkdown, DashboardElementVisualization, DashboardElementInput
    ],
)
