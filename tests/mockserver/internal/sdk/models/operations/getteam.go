// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// GetTeamProduct - filter teams by product
type GetTeamProduct string

const (
	GetTeamProductStream GetTeamProduct = "stream"
	GetTeamProductEdge   GetTeamProduct = "edge"
	GetTeamProductSearch GetTeamProduct = "search"
)

func (e GetTeamProduct) ToPointer() *GetTeamProduct {
	return &e
}
func (e *GetTeamProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		fallthrough
	case "search":
		*e = GetTeamProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamProduct: %v", v)
	}
}

type GetTeamRequest struct {
	// filter teams by product
	Product *GetTeamProduct `queryParam:"style=form,explode=true,name=product"`
}

func (o *GetTeamRequest) GetProduct() *GetTeamProduct {
	if o == nil {
		return nil
	}
	return o.Product
}

// GetTeamResponseBody - a list of Team objects
type GetTeamResponseBody struct {
	// number of items present in the items array
	Count *int64            `json:"count,omitempty"`
	Items []components.Team `json:"items,omitempty"`
}

func (o *GetTeamResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetTeamResponseBody) GetItems() []components.Team {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of Team objects
	Object *GetTeamResponseBody
}

func (o *GetTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTeamResponse) GetObject() *GetTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
