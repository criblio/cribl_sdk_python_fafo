"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_sdk_python_fafo.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class EmailRecipientTypedDict(TypedDict):
    to: str
    r"""Recipients' email addresses"""
    cc: NotRequired[str]
    r"""Cc: Recipients' email addresses"""
    bcc: NotRequired[str]
    r"""Bcc: Recipients' email addresses"""


class EmailRecipient(BaseModel):
    to: str
    r"""Recipients' email addresses"""

    cc: Optional[str] = None
    r"""Cc: Recipients' email addresses"""

    bcc: Optional[str] = None
    r"""Bcc: Recipients' email addresses"""


class NotificationConfigForSMTPTargetTypedDict(TypedDict):
    subject: NotRequired[str]
    r"""Email subject"""
    body: NotRequired[str]
    r"""Email body"""
    email_recipient: NotRequired[EmailRecipientTypedDict]


class NotificationConfigForSMTPTarget(BaseModel):
    subject: Optional[str] = None
    r"""Email subject"""

    body: Optional[str] = None
    r"""Email body"""

    email_recipient: Annotated[
        Optional[EmailRecipient], pydantic.Field(alias="emailRecipient")
    ] = None


class TargetConfigTypedDict(TypedDict):
    id: str
    conf: NotRequired[NotificationConfigForSMTPTargetTypedDict]


class TargetConfig(BaseModel):
    id: str

    conf: Optional[NotificationConfigForSMTPTarget] = None


TargetConfigUnionTypedDict = TargetConfigTypedDict


TargetConfigUnion = TargetConfig


class ConditionSpecificConfigsTypedDict(TypedDict):
    pass


class ConditionSpecificConfigs(BaseModel):
    pass


class NotificationMetadatumTypedDict(TypedDict):
    name: str
    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class NotificationMetadatum(BaseModel):
    name: str

    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class NotificationTypedDict(TypedDict):
    id: str
    condition: str
    disabled: NotRequired[bool]
    targets: NotRequired[List[str]]
    r"""Targets to send any Notifications to"""
    target_configs: NotRequired[List[TargetConfigUnionTypedDict]]
    conf: NotRequired[ConditionSpecificConfigsTypedDict]
    metadata: NotRequired[List[NotificationMetadatumTypedDict]]
    r"""Fields to add to events from this input"""


class Notification(BaseModel):
    id: str

    condition: str

    disabled: Optional[bool] = False

    targets: Optional[List[str]] = None
    r"""Targets to send any Notifications to"""

    target_configs: Annotated[
        Optional[List[TargetConfigUnion]], pydantic.Field(alias="targetConfigs")
    ] = None

    conf: Optional[ConditionSpecificConfigs] = None

    metadata: Optional[List[NotificationMetadatum]] = None
    r"""Fields to add to events from this input"""
