"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .user import User, UserTypedDict
from cribl_sdk_python_fafo.types import BaseModel
from cribl_sdk_python_fafo.utils import (
    FieldMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetProductsUsersByProductProduct(str, Enum):
    r"""product by which to filter members"""

    STREAM = "stream"
    EDGE = "edge"
    SEARCH = "search"
    LAKE = "lake"


class GetProductsUsersByProductRequestTypedDict(TypedDict):
    product: GetProductsUsersByProductProduct
    r"""product by which to filter members"""
    group_id: NotRequired[str]
    r"""filter to specific group by groupId"""


class GetProductsUsersByProductRequest(BaseModel):
    product: Annotated[
        GetProductsUsersByProductProduct,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""product by which to filter members"""

    group_id: Annotated[
        Optional[str],
        pydantic.Field(alias="groupId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""filter to specific group by groupId"""


class GetProductsUsersByProductResponseTypedDict(TypedDict):
    r"""a list of User objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[UserTypedDict]]


class GetProductsUsersByProductResponse(BaseModel):
    r"""a list of User objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[User]] = None
