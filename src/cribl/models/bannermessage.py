"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class BannerType(str, Enum):
    CUSTOM = "custom"
    SYSTEM = "system"


class BannerMessageTypedDict(TypedDict):
    enabled: bool
    r"""Show a banner on top of all pages"""
    type: BannerType
    theme: str
    message: str
    r"""Enter a message to display to all your Organization's users, across all Cribl products. Limited to one line and 100 characters; will be truncated as needed."""
    id: NotRequired[str]
    created: NotRequired[float]
    r"""Time created"""
    invert_font_color: NotRequired[bool]
    link: NotRequired[str]
    r"""Optionally, provide a URL to append to the message"""
    link_display: NotRequired[str]
    r"""Optionally, display your link with a short text label instead of the raw URL (100-character limit)"""
    custom_themes: NotRequired[List[str]]


class BannerMessage(BaseModel):
    enabled: bool
    r"""Show a banner on top of all pages"""

    type: BannerType

    theme: str

    message: str
    r"""Enter a message to display to all your Organization's users, across all Cribl products. Limited to one line and 100 characters; will be truncated as needed."""

    id: Optional[str] = None

    created: Optional[float] = None
    r"""Time created"""

    invert_font_color: Annotated[
        Optional[bool], pydantic.Field(alias="invertFontColor")
    ] = None

    link: Optional[str] = None
    r"""Optionally, provide a URL to append to the message"""

    link_display: Annotated[Optional[str], pydantic.Field(alias="linkDisplay")] = None
    r"""Optionally, display your link with a short text label instead of the raw URL (100-character limit)"""

    custom_themes: Annotated[
        Optional[List[str]], pydantic.Field(alias="customThemes")
    ] = None
