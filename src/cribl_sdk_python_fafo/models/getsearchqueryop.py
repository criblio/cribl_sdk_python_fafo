"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_sdk_python_fafo.types import BaseModel
from cribl_sdk_python_fafo.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSearchQueryRequestTypedDict(TypedDict):
    query_id: NotRequired[str]
    r"""Saved query ID"""
    job_id: NotRequired[str]
    r"""Job ID"""
    query: NotRequired[str]
    r"""Search query string"""
    earliest: NotRequired[float]
    r"""Beginning of query time range, inclusive, in a relative time format or seconds"""
    latest: NotRequired[float]
    r"""End of query time range, exclusive, in a relative time format or seconds"""
    sample_rate: NotRequired[float]
    r"""Number between 0-1 to sample events during search"""
    force: NotRequired[bool]
    r"""When true, forces to run the scheduled query"""
    offset: NotRequired[float]
    r"""Pagination offset"""
    limit: NotRequired[float]
    r"""Pagination limit - maximum number of events to return"""


class GetSearchQueryRequest(BaseModel):
    query_id: Annotated[
        Optional[str],
        pydantic.Field(alias="queryId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Saved query ID"""

    job_id: Annotated[
        Optional[str],
        pydantic.Field(alias="jobId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Job ID"""

    query: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Search query string"""

    earliest: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Beginning of query time range, inclusive, in a relative time format or seconds"""

    latest: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End of query time range, exclusive, in a relative time format or seconds"""

    sample_rate: Annotated[
        Optional[float],
        pydantic.Field(alias="sampleRate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Number between 0-1 to sample events during search"""

    force: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""When true, forces to run the scheduled query"""

    offset: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Pagination offset"""

    limit: Annotated[
        Optional[float],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Pagination limit - maximum number of events to return"""
