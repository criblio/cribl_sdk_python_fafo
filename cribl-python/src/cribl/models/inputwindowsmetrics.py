"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class InputWindowsMetricsType(str, Enum):
    WINDOWS_METRICS = "windows_metrics"


class InputWindowsMetricsConnectionsTypedDict(TypedDict):
    output: str
    pipeline: NotRequired[str]


class InputWindowsMetricsConnections(BaseModel):
    output: str

    pipeline: Optional[str] = None


class InputWindowsMetricsPqMode(str, Enum):
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""

    SMART = "smart"
    ALWAYS = "always"


class InputWindowsMetricsCompression(str, Enum):
    r"""Codec to use to compress the persisted data"""

    NONE = "none"
    GZIP = "gzip"


class InputWindowsMetricsPqTypedDict(TypedDict):
    mode: NotRequired[InputWindowsMetricsPqMode]
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""
    max_buffer_size: NotRequired[float]
    r"""The maximum number of events to hold in memory before writing the events to disk"""
    commit_frequency: NotRequired[float]
    r"""The number of events to send downstream before committing that Stream has read them"""
    max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc."""
    max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>"""
    compress: NotRequired[InputWindowsMetricsCompression]
    r"""Codec to use to compress the persisted data"""


class InputWindowsMetricsPq(BaseModel):
    mode: Optional[InputWindowsMetricsPqMode] = InputWindowsMetricsPqMode.ALWAYS
    r"""With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine."""

    max_buffer_size: Annotated[
        Optional[float], pydantic.Field(alias="maxBufferSize")
    ] = 1000
    r"""The maximum number of events to hold in memory before writing the events to disk"""

    commit_frequency: Annotated[
        Optional[float], pydantic.Field(alias="commitFrequency")
    ] = 42
    r"""The number of events to send downstream before committing that Stream has read them"""

    max_file_size: Annotated[Optional[str], pydantic.Field(alias="maxFileSize")] = (
        "1 MB"
    )
    r"""The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc."""

    max_size: Annotated[Optional[str], pydantic.Field(alias="maxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    path: Optional[str] = "$CRIBL_HOME/state/queues"
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>"""

    compress: Optional[InputWindowsMetricsCompression] = (
        InputWindowsMetricsCompression.NONE
    )
    r"""Codec to use to compress the persisted data"""


class InputWindowsMetricsMode(str, Enum):
    r"""Select level of detail for host metrics"""

    BASIC = "basic"
    ALL = "all"
    CUSTOM = "custom"
    DISABLED = "disabled"


class InputWindowsMetricsHostMode(str, Enum):
    r"""Select the level of details for system metrics"""

    BASIC = "basic"
    ALL = "all"
    CUSTOM = "custom"
    DISABLED = "disabled"


class InputWindowsMetricsSystemTypedDict(TypedDict):
    mode: NotRequired[InputWindowsMetricsHostMode]
    r"""Select the level of details for system metrics"""
    detail: NotRequired[bool]
    r"""Generate metrics for all system information"""


class InputWindowsMetricsSystem(BaseModel):
    mode: Optional[InputWindowsMetricsHostMode] = InputWindowsMetricsHostMode.BASIC
    r"""Select the level of details for system metrics"""

    detail: Optional[bool] = False
    r"""Generate metrics for all system information"""


class InputWindowsMetricsHostCustomMode(str, Enum):
    r"""Select the level of details for CPU metrics"""

    BASIC = "basic"
    ALL = "all"
    CUSTOM = "custom"
    DISABLED = "disabled"


class InputWindowsMetricsCPUTypedDict(TypedDict):
    mode: NotRequired[InputWindowsMetricsHostCustomMode]
    r"""Select the level of details for CPU metrics"""
    per_cpu: NotRequired[bool]
    r"""Generate metrics for each CPU"""
    detail: NotRequired[bool]
    r"""Generate metrics for all CPU states"""
    time: NotRequired[bool]
    r"""Generate raw, monotonic CPU time counters"""


class InputWindowsMetricsCPU(BaseModel):
    mode: Optional[InputWindowsMetricsHostCustomMode] = (
        InputWindowsMetricsHostCustomMode.BASIC
    )
    r"""Select the level of details for CPU metrics"""

    per_cpu: Annotated[Optional[bool], pydantic.Field(alias="perCpu")] = False
    r"""Generate metrics for each CPU"""

    detail: Optional[bool] = False
    r"""Generate metrics for all CPU states"""

    time: Optional[bool] = False
    r"""Generate raw, monotonic CPU time counters"""


class InputWindowsMetricsHostCustomMemoryMode(str, Enum):
    r"""Select the level of details for memory metrics"""

    BASIC = "basic"
    ALL = "all"
    CUSTOM = "custom"
    DISABLED = "disabled"


class InputWindowsMetricsMemoryTypedDict(TypedDict):
    mode: NotRequired[InputWindowsMetricsHostCustomMemoryMode]
    r"""Select the level of details for memory metrics"""
    detail: NotRequired[bool]
    r"""Generate metrics for all memory states"""


class InputWindowsMetricsMemory(BaseModel):
    mode: Optional[InputWindowsMetricsHostCustomMemoryMode] = (
        InputWindowsMetricsHostCustomMemoryMode.BASIC
    )
    r"""Select the level of details for memory metrics"""

    detail: Optional[bool] = False
    r"""Generate metrics for all memory states"""


class InputWindowsMetricsHostCustomNetworkMode(str, Enum):
    r"""Select the level of details for network metrics"""

    BASIC = "basic"
    ALL = "all"
    CUSTOM = "custom"
    DISABLED = "disabled"


class InputWindowsMetricsNetworkTypedDict(TypedDict):
    mode: NotRequired[InputWindowsMetricsHostCustomNetworkMode]
    r"""Select the level of details for network metrics"""
    devices: NotRequired[List[str]]
    r"""Network interfaces to include/exclude. All interfaces are included if this list is empty."""
    per_interface: NotRequired[bool]
    r"""Generate separate metrics for each interface"""
    detail: NotRequired[bool]
    r"""Generate full network metrics"""


class InputWindowsMetricsNetwork(BaseModel):
    mode: Optional[InputWindowsMetricsHostCustomNetworkMode] = (
        InputWindowsMetricsHostCustomNetworkMode.BASIC
    )
    r"""Select the level of details for network metrics"""

    devices: Optional[List[str]] = None
    r"""Network interfaces to include/exclude. All interfaces are included if this list is empty."""

    per_interface: Annotated[Optional[bool], pydantic.Field(alias="perInterface")] = (
        False
    )
    r"""Generate separate metrics for each interface"""

    detail: Optional[bool] = False
    r"""Generate full network metrics"""


class InputWindowsMetricsHostCustomDiskMode(str, Enum):
    r"""Select the level of details for disk metrics"""

    BASIC = "basic"
    ALL = "all"
    CUSTOM = "custom"
    DISABLED = "disabled"


class InputWindowsMetricsDiskTypedDict(TypedDict):
    mode: NotRequired[InputWindowsMetricsHostCustomDiskMode]
    r"""Select the level of details for disk metrics"""
    volumes: NotRequired[List[str]]
    r"""Windows volumes to include/exclude. E.g.: C:, !E:, etc. Wildcards and ! (not) operators are supported. All volumes are included if this list is empty."""
    per_volume: NotRequired[bool]
    r"""Generate separate metrics for each volume"""


class InputWindowsMetricsDisk(BaseModel):
    mode: Optional[InputWindowsMetricsHostCustomDiskMode] = (
        InputWindowsMetricsHostCustomDiskMode.BASIC
    )
    r"""Select the level of details for disk metrics"""

    volumes: Optional[List[str]] = None
    r"""Windows volumes to include/exclude. E.g.: C:, !E:, etc. Wildcards and ! (not) operators are supported. All volumes are included if this list is empty."""

    per_volume: Annotated[Optional[bool], pydantic.Field(alias="perVolume")] = False
    r"""Generate separate metrics for each volume"""


class InputWindowsMetricsCustomTypedDict(TypedDict):
    system: NotRequired[InputWindowsMetricsSystemTypedDict]
    cpu: NotRequired[InputWindowsMetricsCPUTypedDict]
    memory: NotRequired[InputWindowsMetricsMemoryTypedDict]
    network: NotRequired[InputWindowsMetricsNetworkTypedDict]
    disk: NotRequired[InputWindowsMetricsDiskTypedDict]


class InputWindowsMetricsCustom(BaseModel):
    system: Optional[InputWindowsMetricsSystem] = None

    cpu: Optional[InputWindowsMetricsCPU] = None

    memory: Optional[InputWindowsMetricsMemory] = None

    network: Optional[InputWindowsMetricsNetwork] = None

    disk: Optional[InputWindowsMetricsDisk] = None


class InputWindowsMetricsHostTypedDict(TypedDict):
    mode: NotRequired[InputWindowsMetricsMode]
    r"""Select level of detail for host metrics"""
    custom: NotRequired[InputWindowsMetricsCustomTypedDict]


class InputWindowsMetricsHost(BaseModel):
    mode: Optional[InputWindowsMetricsMode] = InputWindowsMetricsMode.BASIC
    r"""Select level of detail for host metrics"""

    custom: Optional[InputWindowsMetricsCustom] = None


class InputWindowsMetricsSetsTypedDict(TypedDict):
    name: str
    filter_: str
    include_children: NotRequired[bool]


class InputWindowsMetricsSets(BaseModel):
    name: str

    filter_: Annotated[str, pydantic.Field(alias="filter")]

    include_children: Annotated[
        Optional[bool], pydantic.Field(alias="includeChildren")
    ] = False


class InputWindowsMetricsProcessTypedDict(TypedDict):
    sets: NotRequired[List[InputWindowsMetricsSetsTypedDict]]
    r"""Configure sets to collect process metrics"""


class InputWindowsMetricsProcess(BaseModel):
    sets: Optional[List[InputWindowsMetricsSets]] = None
    r"""Configure sets to collect process metrics"""


class InputWindowsMetricsMetadataTypedDict(TypedDict):
    name: str
    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class InputWindowsMetricsMetadata(BaseModel):
    name: str

    value: str
    r"""JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)"""


class InputWindowsMetricsPersistenceCompression(str, Enum):
    r"""Select data compression format. Optional."""

    NONE = "none"
    GZIP = "gzip"


class InputWindowsMetricsPersistenceTypedDict(TypedDict):
    enable: NotRequired[bool]
    r"""Spool metrics to disk for Cribl Edge and Search"""
    time_window: NotRequired[str]
    r"""Time span for each file bucket"""
    max_data_size: NotRequired[str]
    r"""Maximum disk space allowed to be consumed (e.g., 420MB or 4GB). Once reached, older data will be deleted."""
    max_data_time: NotRequired[str]
    r"""Maximum amount of time to retain data (e.g., 2h or 4d). Once reached, older data will be deleted."""
    compress: NotRequired[InputWindowsMetricsPersistenceCompression]
    r"""Select data compression format. Optional."""
    dest_path: NotRequired[str]
    r"""Path to use to write metrics. Defaults to $CRIBL_HOME/state/windows_metrics"""


class InputWindowsMetricsPersistence(BaseModel):
    enable: Optional[bool] = False
    r"""Spool metrics to disk for Cribl Edge and Search"""

    time_window: Annotated[Optional[str], pydantic.Field(alias="timeWindow")] = "10m"
    r"""Time span for each file bucket"""

    max_data_size: Annotated[Optional[str], pydantic.Field(alias="maxDataSize")] = "1GB"
    r"""Maximum disk space allowed to be consumed (e.g., 420MB or 4GB). Once reached, older data will be deleted."""

    max_data_time: Annotated[Optional[str], pydantic.Field(alias="maxDataTime")] = "24h"
    r"""Maximum amount of time to retain data (e.g., 2h or 4d). Once reached, older data will be deleted."""

    compress: Optional[InputWindowsMetricsPersistenceCompression] = (
        InputWindowsMetricsPersistenceCompression.GZIP
    )
    r"""Select data compression format. Optional."""

    dest_path: Annotated[Optional[str], pydantic.Field(alias="destPath")] = (
        "$CRIBL_HOME/state/windows_metrics"
    )
    r"""Path to use to write metrics. Defaults to $CRIBL_HOME/state/windows_metrics"""


class InputWindowsMetricsTypedDict(TypedDict):
    id: str
    r"""Unique ID for this input"""
    type: InputWindowsMetricsType
    disabled: NotRequired[bool]
    pipeline: NotRequired[str]
    r"""Pipeline to process data from this Source before sending it through the Routes"""
    send_to_routes: NotRequired[bool]
    r"""Select whether to send data to Routes, or directly to Destinations."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    pq_enabled: NotRequired[bool]
    r"""Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers)."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    connections: NotRequired[List[InputWindowsMetricsConnectionsTypedDict]]
    r"""Direct connections to Destinations, and optionally via a Pipeline or a Pack"""
    pq: NotRequired[InputWindowsMetricsPqTypedDict]
    interval: NotRequired[float]
    r"""Time, in seconds, between consecutive metric collections. Default is 10 seconds."""
    host: NotRequired[InputWindowsMetricsHostTypedDict]
    process: NotRequired[InputWindowsMetricsProcessTypedDict]
    metadata: NotRequired[List[InputWindowsMetricsMetadataTypedDict]]
    r"""Fields to add to events from this input"""
    persistence: NotRequired[InputWindowsMetricsPersistenceTypedDict]
    disable_native_module: NotRequired[bool]
    r"""Enable to use built-in tools (PowerShell) to collect metrics instead of native API (default) [Learn more](https://docs.cribl.io/edge/sources-windows-metrics/#advanced-tab)"""
    description: NotRequired[str]


class InputWindowsMetrics(BaseModel):
    id: str
    r"""Unique ID for this input"""

    type: InputWindowsMetricsType

    disabled: Optional[bool] = False

    pipeline: Optional[str] = None
    r"""Pipeline to process data from this Source before sending it through the Routes"""

    send_to_routes: Annotated[Optional[bool], pydantic.Field(alias="sendToRoutes")] = (
        True
    )
    r"""Select whether to send data to Routes, or directly to Destinations."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    pq_enabled: Annotated[Optional[bool], pydantic.Field(alias="pqEnabled")] = False
    r"""Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers)."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    connections: Optional[List[InputWindowsMetricsConnections]] = None
    r"""Direct connections to Destinations, and optionally via a Pipeline or a Pack"""

    pq: Optional[InputWindowsMetricsPq] = None

    interval: Optional[float] = 10
    r"""Time, in seconds, between consecutive metric collections. Default is 10 seconds."""

    host: Optional[InputWindowsMetricsHost] = None

    process: Optional[InputWindowsMetricsProcess] = None

    metadata: Optional[List[InputWindowsMetricsMetadata]] = None
    r"""Fields to add to events from this input"""

    persistence: Optional[InputWindowsMetricsPersistence] = None

    disable_native_module: Annotated[
        Optional[bool], pydantic.Field(alias="disableNativeModule")
    ] = False
    r"""Enable to use built-in tools (PowerShell) to collect metrics instead of native API (default) [Learn more](https://docs.cribl.io/edge/sources-windows-metrics/#advanced-tab)"""

    description: Optional[str] = None
