"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from ._hooks import SDKHooks
from ._version import (
    __gen_version__,
    __openapi_doc_version__,
    __user_agent__,
    __version__,
)
from .httpclient import AsyncHttpClient, HttpClient
from .utils import Logger, RetryConfig, remove_suffix
from cribl import models
from cribl.types import OptionalNullable, UNSET
from dataclasses import dataclass, field
from pydantic import Field
from typing import Callable, Dict, Optional, Tuple, Union


SERVER_CLOUD = "cloud"
SERVER_CLOUD_GROUP = "cloud-group"
SERVER_MANAGED = "managed"
SERVER_MANAGED_GROUP = "managed-group"
SERVERS = {
    SERVER_CLOUD: "https://{workspaceName}-{organizationId}.{cloudDomain}/api/v1",
    SERVER_CLOUD_GROUP: "https://{workspaceName}-{organizationId}.{cloudDomain}/api/v1/m/{groupName}",
    SERVER_MANAGED: "https://{hostname}:{port}/api/v1",
    SERVER_MANAGED_GROUP: "https://{hostname}:{port}/api/v1/m/{groupName}",
}
"""Contains the list of servers available to the SDK"""


@dataclass
class SDKConfiguration:
    client: Union[HttpClient, None]
    client_supplied: bool
    async_client: Union[AsyncHttpClient, None]
    async_client_supplied: bool
    debug_logger: Logger
    security: Optional[
        Union[models.SecurityModel, Callable[[], models.SecurityModel]]
    ] = None
    server_url: Optional[str] = ""
    server: Optional[str] = ""
    server_defaults: Dict[str, Dict[str, str]] = field(default_factory=Dict)
    language: str = "python"
    openapi_doc_version: str = __openapi_doc_version__
    sdk_version: str = __version__
    gen_version: str = __gen_version__
    user_agent: str = __user_agent__
    retry_config: OptionalNullable[RetryConfig] = Field(default_factory=lambda: UNSET)
    timeout_ms: Optional[int] = None

    def __post_init__(self):
        self._hooks = SDKHooks()

    def get_server_details(self) -> Tuple[str, Dict[str, str]]:
        if self.server_url is not None and self.server_url:
            return remove_suffix(self.server_url, "/"), {}
        if not self.server:
            self.server = SERVER_CLOUD

        if self.server not in SERVERS:
            raise ValueError(f'Invalid server "{self.server}"')

        return SERVERS[self.server], self.server_defaults.get(self.server, {})

    def get_hooks(self) -> SDKHooks:
        return self._hooks
