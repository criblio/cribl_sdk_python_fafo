"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from enum import Enum
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import NotRequired, TypedDict


class ParserLibEntryType(str, Enum):
    r"""Parser or formatter type to use"""

    CSV = "csv"
    ELFF = "elff"
    CLF = "clf"
    KVP = "kvp"
    JSON = "json"
    DELIM = "delim"
    REGEX = "regex"
    GROK = "grok"


class ParserLibEntryTypedDict(TypedDict):
    id: str
    lib: NotRequired[str]
    description: NotRequired[str]
    r"""Brief description of this parser (optional)"""
    tags: NotRequired[str]
    r"""One or more tags related to this parser (optional)"""
    type: NotRequired[ParserLibEntryType]
    r"""Parser or formatter type to use"""


class ParserLibEntry(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    id: str

    lib: Optional[str] = None

    description: Optional[str] = None
    r"""Brief description of this parser (optional)"""

    tags: Optional[str] = None
    r"""One or more tags related to this parser (optional)"""

    type: Optional[ParserLibEntryType] = ParserLibEntryType.CSV
    r"""Parser or formatter type to use"""

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
