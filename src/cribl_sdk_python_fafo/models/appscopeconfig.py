"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appscopetransport import AppscopeTransport, AppscopeTransportTypedDict
from cribl_sdk_python_fafo.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AppscopeConfigCriblTypedDict(TypedDict):
    authtoken: NotRequired[str]
    enable: NotRequired[bool]
    transport: NotRequired[AppscopeTransportTypedDict]
    use_scope_source_transport: NotRequired[bool]


class AppscopeConfigCribl(BaseModel):
    authtoken: Optional[str] = None

    enable: Optional[bool] = None

    transport: Optional[AppscopeTransport] = None

    use_scope_source_transport: Annotated[
        Optional[bool], pydantic.Field(alias="useScopeSourceTransport")
    ] = None


class AppscopeConfigFormatNdjsonTypedDict(TypedDict):
    enhancefs: bool
    maxeventpersec: float


class AppscopeConfigFormatNdjson(BaseModel):
    enhancefs: bool

    maxeventpersec: float


class AppscopeConfigType(str, Enum):
    NDJSON = "ndjson"


class AppscopeConfigWatchTypedDict(TypedDict):
    type: str
    allowbinary: NotRequired[bool]
    enabled: NotRequired[bool]
    field: NotRequired[str]
    headers: NotRequired[str]
    name: NotRequired[str]
    value: NotRequired[str]


class AppscopeConfigWatch(BaseModel):
    type: str

    allowbinary: Optional[bool] = None

    enabled: Optional[bool] = None

    field: Optional[str] = None

    headers: Optional[str] = None

    name: Optional[str] = None

    value: Optional[str] = None


class AppscopeConfigEventTypedDict(TypedDict):
    enable: bool
    format_: AppscopeConfigFormatNdjsonTypedDict
    transport: AppscopeTransportTypedDict
    type: AppscopeConfigType
    watch: List[AppscopeConfigWatchTypedDict]


class AppscopeConfigEvent(BaseModel):
    enable: bool

    format_: Annotated[AppscopeConfigFormatNdjson, pydantic.Field(alias="format")]

    transport: AppscopeTransport

    type: AppscopeConfigType

    watch: List[AppscopeConfigWatch]


class AppscopeConfigLevel(str, Enum):
    ERROR = "error"
    DEBUG = "debug"
    INFO = "info"
    WARNING = "warning"
    NONE = "none"


class AppscopeConfigLogTypedDict(TypedDict):
    level: NotRequired[AppscopeConfigLevel]
    transport: NotRequired[AppscopeTransportTypedDict]


class AppscopeConfigLog(BaseModel):
    level: Optional[AppscopeConfigLevel] = None

    transport: Optional[AppscopeTransport] = None


class AppscopeConfigLibscopeTypedDict(TypedDict):
    commanddir: NotRequired[str]
    configevent: NotRequired[bool]
    log: NotRequired[AppscopeConfigLogTypedDict]
    summaryperiod: NotRequired[float]


class AppscopeConfigLibscope(BaseModel):
    commanddir: Optional[str] = None

    configevent: Optional[bool] = None

    log: Optional[AppscopeConfigLog] = None

    summaryperiod: Optional[float] = None


class AppscopeConfigMetricFormatTypedDict(TypedDict):
    statsdmaxlen: NotRequired[float]
    statsdprefix: NotRequired[str]
    type: NotRequired[str]
    verbosity: NotRequired[float]


class AppscopeConfigMetricFormat(BaseModel):
    statsdmaxlen: Optional[float] = None

    statsdprefix: Optional[str] = None

    type: Optional[str] = None

    verbosity: Optional[float] = None


class AppscopeConfigMetricTypedDict(TypedDict):
    enable: bool
    format_: AppscopeConfigMetricFormatTypedDict
    transport: AppscopeTransportTypedDict
    watch: List[str]


class AppscopeConfigMetric(BaseModel):
    enable: bool

    format_: Annotated[AppscopeConfigMetricFormat, pydantic.Field(alias="format")]

    transport: AppscopeTransport

    watch: List[str]


class AppscopeConfigPayloadTypedDict(TypedDict):
    dir: str
    enable: bool


class AppscopeConfigPayload(BaseModel):
    dir: str

    enable: bool


class AppscopeConfigProtocolTypedDict(TypedDict):
    binary: bool
    detect: bool
    len: float
    name: str
    payload: bool
    regex: str


class AppscopeConfigProtocol(BaseModel):
    binary: bool

    detect: bool

    len: float

    name: str

    payload: bool

    regex: str


class AppscopeConfigTagTypedDict(TypedDict):
    key: str
    value: str


class AppscopeConfigTag(BaseModel):
    key: str

    value: str


class AppscopeConfigTypedDict(TypedDict):
    cribl: NotRequired[AppscopeConfigCriblTypedDict]
    event: NotRequired[AppscopeConfigEventTypedDict]
    libscope: NotRequired[AppscopeConfigLibscopeTypedDict]
    metric: NotRequired[AppscopeConfigMetricTypedDict]
    payload: NotRequired[AppscopeConfigPayloadTypedDict]
    protocol: NotRequired[List[AppscopeConfigProtocolTypedDict]]
    tags: NotRequired[List[AppscopeConfigTagTypedDict]]


class AppscopeConfig(BaseModel):
    cribl: Optional[AppscopeConfigCribl] = None

    event: Optional[AppscopeConfigEvent] = None

    libscope: Optional[AppscopeConfigLibscope] = None

    metric: Optional[AppscopeConfigMetric] = None

    payload: Optional[AppscopeConfigPayload] = None

    protocol: Optional[List[AppscopeConfigProtocol]] = None

    tags: Optional[List[AppscopeConfigTag]] = None
