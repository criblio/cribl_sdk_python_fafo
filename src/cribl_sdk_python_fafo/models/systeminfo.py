"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appmode import AppMode
from .bulletinmessage import BulletinMessage, BulletinMessageTypedDict
from .licenseinfo import LicenseInfo, LicenseInfoTypedDict
from .systemconf import SystemConf, SystemConfTypedDict
from cribl_sdk_python_fafo.types import BaseModel
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SystemInfoConfTypedDict(TypedDict):
    inputs: float
    outputs: float
    pipelines: float
    routes: float
    rules: float
    conf_version: NotRequired[str]
    name: NotRequired[str]


class SystemInfoConf(BaseModel):
    inputs: float

    outputs: float

    pipelines: float

    routes: float

    rules: float

    conf_version: Annotated[Optional[str], pydantic.Field(alias="confVersion")] = None

    name: Optional[str] = None


class CpusTypedDict(TypedDict):
    model: str
    speed: float
    times: Dict[str, Any]


class Cpus(BaseModel):
    model: str

    speed: float

    times: Dict[str, Any]


class DiskUsageTypedDict(TypedDict):
    bytes_available: float
    bytes_used: float
    disk_path: str
    total_disk_size: float


class DiskUsage(BaseModel):
    bytes_available: Annotated[float, pydantic.Field(alias="bytesAvailable")]

    bytes_used: Annotated[float, pydantic.Field(alias="bytesUsed")]

    disk_path: Annotated[str, pydantic.Field(alias="diskPath")]

    total_disk_size: Annotated[float, pydantic.Field(alias="totalDiskSize")]


class EnvTypedDict(TypedDict):
    pass


class Env(BaseModel):
    pass


class SystemInfoSamplesTypedDict(TypedDict):
    max_size: str


class SystemInfoSamples(BaseModel):
    max_size: Annotated[str, pydantic.Field(alias="maxSize")]


class SystemInfoLimitsTypedDict(TypedDict):
    samples: SystemInfoSamplesTypedDict


class SystemInfoLimits(BaseModel):
    samples: SystemInfoSamples


class SystemInfoMemoryTypedDict(TypedDict):
    free: float
    total: float


class SystemInfoMemory(BaseModel):
    free: float

    total: float


class SystemInfoOsTypedDict(TypedDict):
    arch: str
    endianness: str
    platform: str
    release: str
    type: str


class SystemInfoOs(BaseModel):
    arch: str

    endianness: str

    platform: str

    release: str

    type: str


class SystemInfoTypedDict(TypedDict):
    build: Dict[str, Any]
    api_port: float
    conf: SystemInfoConfTypedDict
    config_path: str
    cpus: List[CpusTypedDict]
    disk_usage: DiskUsageTypedDict
    dist_mode: AppMode
    env: EnvTypedDict
    guid: str
    hostname: str
    install_path: str
    license: LicenseInfoTypedDict
    limits: SystemInfoLimitsTypedDict
    loadavg: List[float]
    memory: SystemInfoMemoryTypedDict
    messages: List[BulletinMessageTypedDict]
    net: Dict[str, Any]
    os: SystemInfoOsTypedDict
    system_conf: SystemConfTypedDict
    uptime: float
    version: str
    worker_processes: float
    has_cloud_workspace: NotRequired[bool]
    is_cribl_sandbox: NotRequired[bool]
    is_fed_ramp_enabled: NotRequired[bool]
    is_fips_enabled: NotRequired[bool]


class SystemInfo(BaseModel):
    build: Annotated[Dict[str, Any], pydantic.Field(alias="BUILD")]

    api_port: Annotated[float, pydantic.Field(alias="apiPort")]

    conf: SystemInfoConf

    config_path: Annotated[str, pydantic.Field(alias="configPath")]

    cpus: List[Cpus]

    disk_usage: Annotated[DiskUsage, pydantic.Field(alias="diskUsage")]

    dist_mode: Annotated[AppMode, pydantic.Field(alias="distMode")]

    env: Env

    guid: str

    hostname: str

    install_path: Annotated[str, pydantic.Field(alias="installPath")]

    license: LicenseInfo

    limits: SystemInfoLimits

    loadavg: List[float]

    memory: SystemInfoMemory

    messages: List[BulletinMessage]

    net: Dict[str, Any]

    os: SystemInfoOs

    system_conf: Annotated[SystemConf, pydantic.Field(alias="systemConf")]

    uptime: float

    version: str

    worker_processes: Annotated[float, pydantic.Field(alias="workerProcesses")]

    has_cloud_workspace: Annotated[
        Optional[bool], pydantic.Field(alias="hasCloudWorkspace")
    ] = None

    is_cribl_sandbox: Annotated[
        Optional[bool], pydantic.Field(alias="isCriblSandbox")
    ] = None

    is_fed_ramp_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="isFedRampEnabled")
    ] = None

    is_fips_enabled: Annotated[
        Optional[bool], pydantic.Field(alias="isFipsEnabled")
    ] = None
