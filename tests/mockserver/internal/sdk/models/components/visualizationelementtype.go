// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type VisualizationElementTypeEnum2 string

const (
	VisualizationElementTypeEnum2ListEvents VisualizationElementTypeEnum2 = "list.events"
	VisualizationElementTypeEnum2ListTable  VisualizationElementTypeEnum2 = "list.table"
)

func (e VisualizationElementTypeEnum2) ToPointer() *VisualizationElementTypeEnum2 {
	return &e
}
func (e *VisualizationElementTypeEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list.events":
		fallthrough
	case "list.table":
		*e = VisualizationElementTypeEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VisualizationElementTypeEnum2: %v", v)
	}
}

type VisualizationElementTypeEnum1 string

const (
	VisualizationElementTypeEnum1ChartArea          VisualizationElementTypeEnum1 = "chart.area"
	VisualizationElementTypeEnum1ChartColumn        VisualizationElementTypeEnum1 = "chart.column"
	VisualizationElementTypeEnum1ChartFunnel        VisualizationElementTypeEnum1 = "chart.funnel"
	VisualizationElementTypeEnum1ChartGauge         VisualizationElementTypeEnum1 = "chart.gauge"
	VisualizationElementTypeEnum1ChartHorizontalBar VisualizationElementTypeEnum1 = "chart.horizontalBar"
	VisualizationElementTypeEnum1ChartLine          VisualizationElementTypeEnum1 = "chart.line"
	VisualizationElementTypeEnum1ChartMap           VisualizationElementTypeEnum1 = "chart.map"
	VisualizationElementTypeEnum1ChartPie           VisualizationElementTypeEnum1 = "chart.pie"
	VisualizationElementTypeEnum1ChartScatter       VisualizationElementTypeEnum1 = "chart.scatter"
	VisualizationElementTypeEnum1CounterSingle      VisualizationElementTypeEnum1 = "counter.single"
)

func (e VisualizationElementTypeEnum1) ToPointer() *VisualizationElementTypeEnum1 {
	return &e
}
func (e *VisualizationElementTypeEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "chart.area":
		fallthrough
	case "chart.column":
		fallthrough
	case "chart.funnel":
		fallthrough
	case "chart.gauge":
		fallthrough
	case "chart.horizontalBar":
		fallthrough
	case "chart.line":
		fallthrough
	case "chart.map":
		fallthrough
	case "chart.pie":
		fallthrough
	case "chart.scatter":
		fallthrough
	case "counter.single":
		*e = VisualizationElementTypeEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VisualizationElementTypeEnum1: %v", v)
	}
}

type VisualizationElementTypeType string

const (
	VisualizationElementTypeTypeVisualizationElementTypeEnum1 VisualizationElementTypeType = "VisualizationElementType_enum_1"
	VisualizationElementTypeTypeVisualizationElementTypeEnum2 VisualizationElementTypeType = "VisualizationElementType_enum_2"
)

type VisualizationElementType struct {
	VisualizationElementTypeEnum1 *VisualizationElementTypeEnum1 `queryParam:"inline"`
	VisualizationElementTypeEnum2 *VisualizationElementTypeEnum2 `queryParam:"inline"`

	Type VisualizationElementTypeType
}

func CreateVisualizationElementTypeVisualizationElementTypeEnum1(visualizationElementTypeEnum1 VisualizationElementTypeEnum1) VisualizationElementType {
	typ := VisualizationElementTypeTypeVisualizationElementTypeEnum1

	return VisualizationElementType{
		VisualizationElementTypeEnum1: &visualizationElementTypeEnum1,
		Type:                          typ,
	}
}

func CreateVisualizationElementTypeVisualizationElementTypeEnum2(visualizationElementTypeEnum2 VisualizationElementTypeEnum2) VisualizationElementType {
	typ := VisualizationElementTypeTypeVisualizationElementTypeEnum2

	return VisualizationElementType{
		VisualizationElementTypeEnum2: &visualizationElementTypeEnum2,
		Type:                          typ,
	}
}

func (u *VisualizationElementType) UnmarshalJSON(data []byte) error {

	var visualizationElementTypeEnum1 VisualizationElementTypeEnum1 = VisualizationElementTypeEnum1("")
	if err := utils.UnmarshalJSON(data, &visualizationElementTypeEnum1, "", true, true); err == nil {
		u.VisualizationElementTypeEnum1 = &visualizationElementTypeEnum1
		u.Type = VisualizationElementTypeTypeVisualizationElementTypeEnum1
		return nil
	}

	var visualizationElementTypeEnum2 VisualizationElementTypeEnum2 = VisualizationElementTypeEnum2("")
	if err := utils.UnmarshalJSON(data, &visualizationElementTypeEnum2, "", true, true); err == nil {
		u.VisualizationElementTypeEnum2 = &visualizationElementTypeEnum2
		u.Type = VisualizationElementTypeTypeVisualizationElementTypeEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for VisualizationElementType", string(data))
}

func (u VisualizationElementType) MarshalJSON() ([]byte, error) {
	if u.VisualizationElementTypeEnum1 != nil {
		return utils.MarshalJSON(u.VisualizationElementTypeEnum1, "", true)
	}

	if u.VisualizationElementTypeEnum2 != nil {
		return utils.MarshalJSON(u.VisualizationElementTypeEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type VisualizationElementType: all fields are null")
}
