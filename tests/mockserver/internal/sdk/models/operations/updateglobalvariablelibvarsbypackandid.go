// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type UpdateGlobalVariableLibVarsByPackAndIDRequest struct {
	// Unique ID to PATCH for pack
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// pack ID to PATCH
	Pack string `pathParam:"style=simple,explode=false,name=pack"`
	// Global Variable object to be updated
	GlobalVar components.GlobalVar `request:"mediaType=application/json"`
}

func (o *UpdateGlobalVariableLibVarsByPackAndIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateGlobalVariableLibVarsByPackAndIDRequest) GetPack() string {
	if o == nil {
		return ""
	}
	return o.Pack
}

func (o *UpdateGlobalVariableLibVarsByPackAndIDRequest) GetGlobalVar() components.GlobalVar {
	if o == nil {
		return components.GlobalVar{}
	}
	return o.GlobalVar
}

// UpdateGlobalVariableLibVarsByPackAndIDResponseBody - a list of Global Variable objects
type UpdateGlobalVariableLibVarsByPackAndIDResponseBody struct {
	// number of items present in the items array
	Count *int64                 `json:"count,omitempty"`
	Items []components.GlobalVar `json:"items,omitempty"`
}

func (o *UpdateGlobalVariableLibVarsByPackAndIDResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *UpdateGlobalVariableLibVarsByPackAndIDResponseBody) GetItems() []components.GlobalVar {
	if o == nil {
		return nil
	}
	return o.Items
}

type UpdateGlobalVariableLibVarsByPackAndIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of Global Variable objects
	Object *UpdateGlobalVariableLibVarsByPackAndIDResponseBody
}

func (o *UpdateGlobalVariableLibVarsByPackAndIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateGlobalVariableLibVarsByPackAndIDResponse) GetObject() *UpdateGlobalVariableLibVarsByPackAndIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
