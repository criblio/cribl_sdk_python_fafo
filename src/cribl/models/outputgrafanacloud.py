"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class OutputGrafanaCloud2Type(str, Enum):
    GRAFANA_CLOUD = "grafana_cloud"


class OutputGrafanaCloud2MessageFormat(str, Enum):
    r"""Which format to use when sending logs to Loki (Protobuf or JSON).  Defaults to Protobuf."""

    PROTOBUF = "protobuf"
    JSON = "json"


class OutputGrafanaCloudLabelsTypedDict(TypedDict):
    value: str
    r"""Value of the label."""
    name: NotRequired[str]
    r"""Name of the label."""


class OutputGrafanaCloudLabels(BaseModel):
    value: str
    r"""Value of the label."""

    name: Optional[str] = ""
    r"""Name of the label."""


class OutputGrafanaCloud2AuthenticationType(str, Enum):
    r"""The authentication method to use for the HTTP requests"""

    NONE = "none"
    TOKEN = "token"
    TEXT_SECRET = "textSecret"
    BASIC = "basic"
    CREDENTIALS_SECRET = "credentialsSecret"


class OutputGrafanaCloud2PrometheusAuthTypedDict(TypedDict):
    auth_type: NotRequired[OutputGrafanaCloud2AuthenticationType]
    r"""The authentication method to use for the HTTP requests"""
    token: NotRequired[str]
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    username: NotRequired[str]
    r"""Username for authentication"""
    password: NotRequired[str]
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""
    credentials_secret: NotRequired[str]
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloud2PrometheusAuth(BaseModel):
    auth_type: Annotated[
        Optional[OutputGrafanaCloud2AuthenticationType],
        pydantic.Field(alias="authType"),
    ] = OutputGrafanaCloud2AuthenticationType.BASIC
    r"""The authentication method to use for the HTTP requests"""

    token: Optional[str] = None
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    username: Optional[str] = None
    r"""Username for authentication"""

    password: Optional[str] = None
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""

    credentials_secret: Annotated[
        Optional[str], pydantic.Field(alias="credentialsSecret")
    ] = None
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloud2LokiAuthAuthenticationType(str, Enum):
    r"""The authentication method to use for the HTTP requests"""

    NONE = "none"
    TOKEN = "token"
    TEXT_SECRET = "textSecret"
    BASIC = "basic"
    CREDENTIALS_SECRET = "credentialsSecret"


class OutputGrafanaCloud2LokiAuthTypedDict(TypedDict):
    auth_type: NotRequired[OutputGrafanaCloud2LokiAuthAuthenticationType]
    r"""The authentication method to use for the HTTP requests"""
    token: NotRequired[str]
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    username: NotRequired[str]
    r"""Username for authentication"""
    password: NotRequired[str]
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""
    credentials_secret: NotRequired[str]
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloud2LokiAuth(BaseModel):
    auth_type: Annotated[
        Optional[OutputGrafanaCloud2LokiAuthAuthenticationType],
        pydantic.Field(alias="authType"),
    ] = OutputGrafanaCloud2LokiAuthAuthenticationType.BASIC
    r"""The authentication method to use for the HTTP requests"""

    token: Optional[str] = None
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    username: Optional[str] = None
    r"""Username for authentication"""

    password: Optional[str] = None
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""

    credentials_secret: Annotated[
        Optional[str], pydantic.Field(alias="credentialsSecret")
    ] = None
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloud2ExtraHTTPHeadersTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputGrafanaCloud2ExtraHTTPHeaders(BaseModel):
    value: str

    name: Optional[str] = None


class OutputGrafanaCloud2FailedRequestLoggingMode(str, Enum):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    PAYLOAD = "payload"
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    NONE = "none"


class OutputGrafanaCloud2ResponseRetrySettingsTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloud2ResponseRetrySettings(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloud2TimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    r"""Enable to retry on request timeout"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloud2TimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )
    r"""Enable to retry on request timeout"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloud2BackpressureBehavior(str, Enum):
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputGrafanaCloud2Compression(str, Enum):
    r"""Codec to use to compress the persisted data."""

    NONE = "none"
    GZIP = "gzip"


class OutputGrafanaCloud2QueueFullBehavior(str, Enum):
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputGrafanaCloud2Mode(str, Enum):
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputGrafanaCloud2PqControlsTypedDict(TypedDict):
    pass


class OutputGrafanaCloud2PqControls(BaseModel):
    pass


class OutputGrafanaCloud2TypedDict(TypedDict):
    id: str
    r"""Unique ID for this output"""
    type: OutputGrafanaCloud2Type
    prometheus_url: str
    r"""The remote_write endpoint to send Prometheus metrics to, e.g.: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    loki_url: NotRequired[str]
    r"""The endpoint to send logs to, e.g.: https://logs-prod-us-central1.grafana.net"""
    message: NotRequired[str]
    r"""Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event."""
    message_format: NotRequired[OutputGrafanaCloud2MessageFormat]
    r"""Which format to use when sending logs to Loki (Protobuf or JSON).  Defaults to Protobuf."""
    labels: NotRequired[List[OutputGrafanaCloudLabelsTypedDict]]
    r"""List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field (e.g.: '__labels: {host: \"cribl.io\", level: \"error\"}')."""
    metric_rename_expr: NotRequired[str]
    r"""A JS expression that can be used to rename metrics. E.g.: name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name.  You can access event fields' values via __e.<fieldName>."""
    prometheus_auth: NotRequired[OutputGrafanaCloud2PrometheusAuthTypedDict]
    loki_auth: NotRequired[OutputGrafanaCloud2LokiAuthTypedDict]
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order."""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Defaults to Yes. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    extra_http_headers: NotRequired[List[OutputGrafanaCloud2ExtraHTTPHeadersTypedDict]]
    r"""Headers to add to all events"""
    use_round_robin_dns: NotRequired[bool]
    r"""Enables round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    failed_request_logging_mode: NotRequired[
        OutputGrafanaCloud2FailedRequestLoggingMode
    ]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    response_retry_settings: NotRequired[
        List[OutputGrafanaCloud2ResponseRetrySettingsTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)."""
    timeout_retry_settings: NotRequired[
        OutputGrafanaCloud2TimeoutRetrySettingsTypedDict
    ]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    on_backpressure: NotRequired[OutputGrafanaCloud2BackpressureBehavior]
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""
    description: NotRequired[str]
    compress: NotRequired[bool]
    r"""Whether to compress the payload body before sending. Applies only to Loki's JSON payloads, as both Prometheus' and Loki's Protobuf variant are snappy-compressed by default."""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)."""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputGrafanaCloud2Compression]
    r"""Codec to use to compress the persisted data."""
    pq_on_backpressure: NotRequired[OutputGrafanaCloud2QueueFullBehavior]
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputGrafanaCloud2Mode]
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputGrafanaCloud2PqControlsTypedDict]


class OutputGrafanaCloud2(BaseModel):
    id: str
    r"""Unique ID for this output"""

    type: OutputGrafanaCloud2Type

    prometheus_url: Annotated[str, pydantic.Field(alias="prometheusUrl")]
    r"""The remote_write endpoint to send Prometheus metrics to, e.g.: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    loki_url: Annotated[Optional[str], pydantic.Field(alias="lokiUrl")] = None
    r"""The endpoint to send logs to, e.g.: https://logs-prod-us-central1.grafana.net"""

    message: Optional[str] = None
    r"""Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event."""

    message_format: Annotated[
        Optional[OutputGrafanaCloud2MessageFormat],
        pydantic.Field(alias="messageFormat"),
    ] = OutputGrafanaCloud2MessageFormat.PROTOBUF
    r"""Which format to use when sending logs to Loki (Protobuf or JSON).  Defaults to Protobuf."""

    labels: Optional[List[OutputGrafanaCloudLabels]] = None
    r"""List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field (e.g.: '__labels: {host: \"cribl.io\", level: \"error\"}')."""

    metric_rename_expr: Annotated[
        Optional[str], pydantic.Field(alias="metricRenameExpr")
    ] = "name.replace(/[^a-zA-Z0-9_]/g, '_')"
    r"""A JS expression that can be used to rename metrics. E.g.: name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name.  You can access event fields' values via __e.<fieldName>."""

    prometheus_auth: Annotated[
        Optional[OutputGrafanaCloud2PrometheusAuth],
        pydantic.Field(alias="prometheusAuth"),
    ] = None

    loki_auth: Annotated[
        Optional[OutputGrafanaCloud2LokiAuth], pydantic.Field(alias="lokiAuth")
    ] = None

    concurrency: Optional[float] = 1
    r"""Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order."""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 4096
    r"""Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Defaults to Yes. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 15
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    extra_http_headers: Annotated[
        Optional[List[OutputGrafanaCloud2ExtraHTTPHeaders]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events"""

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enables round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    failed_request_logging_mode: Annotated[
        Optional[OutputGrafanaCloud2FailedRequestLoggingMode],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputGrafanaCloud2FailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    response_retry_settings: Annotated[
        Optional[List[OutputGrafanaCloud2ResponseRetrySettings]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)."""

    timeout_retry_settings: Annotated[
        Optional[OutputGrafanaCloud2TimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = False
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    on_backpressure: Annotated[
        Optional[OutputGrafanaCloud2BackpressureBehavior],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputGrafanaCloud2BackpressureBehavior.BLOCK
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""

    description: Optional[str] = None

    compress: Optional[bool] = True
    r"""Whether to compress the payload body before sending. Applies only to Loki's JSON payloads, as both Prometheus' and Loki's Protobuf variant are snappy-compressed by default."""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)."""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Optional[OutputGrafanaCloud2Compression], pydantic.Field(alias="pqCompress")
    ] = OutputGrafanaCloud2Compression.NONE
    r"""Codec to use to compress the persisted data."""

    pq_on_backpressure: Annotated[
        Optional[OutputGrafanaCloud2QueueFullBehavior],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputGrafanaCloud2QueueFullBehavior.BLOCK
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Optional[OutputGrafanaCloud2Mode], pydantic.Field(alias="pqMode")
    ] = OutputGrafanaCloud2Mode.ERROR
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputGrafanaCloud2PqControls], pydantic.Field(alias="pqControls")
    ] = None


class OutputGrafanaCloudType(str, Enum):
    GRAFANA_CLOUD = "grafana_cloud"


class OutputGrafanaCloudMessageFormat(str, Enum):
    r"""Which format to use when sending logs to Loki (Protobuf or JSON).  Defaults to Protobuf."""

    PROTOBUF = "protobuf"
    JSON = "json"


class OutputGrafanaCloud1LabelsTypedDict(TypedDict):
    value: str
    r"""Value of the label."""
    name: NotRequired[str]
    r"""Name of the label."""


class OutputGrafanaCloud1Labels(BaseModel):
    value: str
    r"""Value of the label."""

    name: Optional[str] = ""
    r"""Name of the label."""


class OutputGrafanaCloudAuthenticationType(str, Enum):
    r"""The authentication method to use for the HTTP requests"""

    NONE = "none"
    TOKEN = "token"
    TEXT_SECRET = "textSecret"
    BASIC = "basic"
    CREDENTIALS_SECRET = "credentialsSecret"


class OutputGrafanaCloudPrometheusAuthTypedDict(TypedDict):
    auth_type: NotRequired[OutputGrafanaCloudAuthenticationType]
    r"""The authentication method to use for the HTTP requests"""
    token: NotRequired[str]
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    username: NotRequired[str]
    r"""Username for authentication"""
    password: NotRequired[str]
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""
    credentials_secret: NotRequired[str]
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloudPrometheusAuth(BaseModel):
    auth_type: Annotated[
        Optional[OutputGrafanaCloudAuthenticationType], pydantic.Field(alias="authType")
    ] = OutputGrafanaCloudAuthenticationType.BASIC
    r"""The authentication method to use for the HTTP requests"""

    token: Optional[str] = None
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    username: Optional[str] = None
    r"""Username for authentication"""

    password: Optional[str] = None
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""

    credentials_secret: Annotated[
        Optional[str], pydantic.Field(alias="credentialsSecret")
    ] = None
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloud1AuthenticationType(str, Enum):
    r"""The authentication method to use for the HTTP requests"""

    NONE = "none"
    TOKEN = "token"
    TEXT_SECRET = "textSecret"
    BASIC = "basic"
    CREDENTIALS_SECRET = "credentialsSecret"


class OutputGrafanaCloudLokiAuthTypedDict(TypedDict):
    auth_type: NotRequired[OutputGrafanaCloud1AuthenticationType]
    r"""The authentication method to use for the HTTP requests"""
    token: NotRequired[str]
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    username: NotRequired[str]
    r"""Username for authentication"""
    password: NotRequired[str]
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""
    credentials_secret: NotRequired[str]
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloudLokiAuth(BaseModel):
    auth_type: Annotated[
        Optional[OutputGrafanaCloud1AuthenticationType],
        pydantic.Field(alias="authType"),
    ] = OutputGrafanaCloud1AuthenticationType.BASIC
    r"""The authentication method to use for the HTTP requests"""

    token: Optional[str] = None
    r"""Bearer token to include in the authorization header. In Grafana Cloud, this is generally built by concatenating the username and the API key, separated by a colon. E.g.: <your-username>:<your-api-key>."""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    username: Optional[str] = None
    r"""Username for authentication"""

    password: Optional[str] = None
    r"""Password (a.k.a API key in Grafana Cloud domain) for authentication"""

    credentials_secret: Annotated[
        Optional[str], pydantic.Field(alias="credentialsSecret")
    ] = None
    r"""Select or create a secret that references your credentials"""


class OutputGrafanaCloudExtraHTTPHeadersTypedDict(TypedDict):
    value: str
    name: NotRequired[str]


class OutputGrafanaCloudExtraHTTPHeaders(BaseModel):
    value: str

    name: Optional[str] = None


class OutputGrafanaCloudFailedRequestLoggingMode(str, Enum):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    PAYLOAD = "payload"
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    NONE = "none"


class OutputGrafanaCloudResponseRetrySettingsTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudResponseRetrySettings(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    r"""Enable to retry on request timeout"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )
    r"""Enable to retry on request timeout"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputGrafanaCloudBackpressureBehavior(str, Enum):
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputGrafanaCloudCompression(str, Enum):
    r"""Codec to use to compress the persisted data."""

    NONE = "none"
    GZIP = "gzip"


class OutputGrafanaCloudQueueFullBehavior(str, Enum):
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputGrafanaCloudMode(str, Enum):
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputGrafanaCloudPqControlsTypedDict(TypedDict):
    pass


class OutputGrafanaCloudPqControls(BaseModel):
    pass


class OutputGrafanaCloud1TypedDict(TypedDict):
    id: str
    r"""Unique ID for this output"""
    type: OutputGrafanaCloudType
    loki_url: str
    r"""The endpoint to send logs to, e.g.: https://logs-prod-us-central1.grafana.net"""
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    prometheus_url: NotRequired[str]
    r"""The remote_write endpoint to send Prometheus metrics to, e.g.: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push"""
    message: NotRequired[str]
    r"""Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event."""
    message_format: NotRequired[OutputGrafanaCloudMessageFormat]
    r"""Which format to use when sending logs to Loki (Protobuf or JSON).  Defaults to Protobuf."""
    labels: NotRequired[List[OutputGrafanaCloud1LabelsTypedDict]]
    r"""List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field (e.g.: '__labels: {host: \"cribl.io\", level: \"error\"}')."""
    metric_rename_expr: NotRequired[str]
    r"""A JS expression that can be used to rename metrics. E.g.: name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name.  You can access event fields' values via __e.<fieldName>."""
    prometheus_auth: NotRequired[OutputGrafanaCloudPrometheusAuthTypedDict]
    loki_auth: NotRequired[OutputGrafanaCloudLokiAuthTypedDict]
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order."""
    max_payload_size_kb: NotRequired[float]
    r"""Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Defaults to Yes. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""
    extra_http_headers: NotRequired[List[OutputGrafanaCloudExtraHTTPHeadersTypedDict]]
    r"""Headers to add to all events"""
    use_round_robin_dns: NotRequired[bool]
    r"""Enables round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    failed_request_logging_mode: NotRequired[OutputGrafanaCloudFailedRequestLoggingMode]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    response_retry_settings: NotRequired[
        List[OutputGrafanaCloudResponseRetrySettingsTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)."""
    timeout_retry_settings: NotRequired[OutputGrafanaCloudTimeoutRetrySettingsTypedDict]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    on_backpressure: NotRequired[OutputGrafanaCloudBackpressureBehavior]
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""
    description: NotRequired[str]
    compress: NotRequired[bool]
    r"""Whether to compress the payload body before sending. Applies only to Loki's JSON payloads, as both Prometheus' and Loki's Protobuf variant are snappy-compressed by default."""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)."""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputGrafanaCloudCompression]
    r"""Codec to use to compress the persisted data."""
    pq_on_backpressure: NotRequired[OutputGrafanaCloudQueueFullBehavior]
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputGrafanaCloudMode]
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputGrafanaCloudPqControlsTypedDict]


class OutputGrafanaCloud1(BaseModel):
    id: str
    r"""Unique ID for this output"""

    type: OutputGrafanaCloudType

    loki_url: Annotated[str, pydantic.Field(alias="lokiUrl")]
    r"""The endpoint to send logs to, e.g.: https://logs-prod-us-central1.grafana.net"""

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards. These fields are added as dimensions and labels to generated metrics and logs, respectively."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    prometheus_url: Annotated[Optional[str], pydantic.Field(alias="prometheusUrl")] = (
        None
    )
    r"""The remote_write endpoint to send Prometheus metrics to, e.g.: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push"""

    message: Optional[str] = None
    r"""Name of the event field that contains the message to send. If not specified, Stream sends a JSON representation of the whole event."""

    message_format: Annotated[
        Optional[OutputGrafanaCloudMessageFormat], pydantic.Field(alias="messageFormat")
    ] = OutputGrafanaCloudMessageFormat.PROTOBUF
    r"""Which format to use when sending logs to Loki (Protobuf or JSON).  Defaults to Protobuf."""

    labels: Optional[List[OutputGrafanaCloud1Labels]] = None
    r"""List of labels to send with logs. Labels define Loki streams, so use static labels to avoid proliferating label value combinations and streams. Can be merged and/or overridden by the event's __labels field (e.g.: '__labels: {host: \"cribl.io\", level: \"error\"}')."""

    metric_rename_expr: Annotated[
        Optional[str], pydantic.Field(alias="metricRenameExpr")
    ] = "name.replace(/[^a-zA-Z0-9_]/g, '_')"
    r"""A JS expression that can be used to rename metrics. E.g.: name.replace(/\./g, '_') will replace all '.' characters in a metric's name with the supported '_' character. Use the 'name' global variable to access the metric's name.  You can access event fields' values via __e.<fieldName>."""

    prometheus_auth: Annotated[
        Optional[OutputGrafanaCloudPrometheusAuth],
        pydantic.Field(alias="prometheusAuth"),
    ] = None

    loki_auth: Annotated[
        Optional[OutputGrafanaCloudLokiAuth], pydantic.Field(alias="lokiAuth")
    ] = None

    concurrency: Optional[float] = 1
    r"""Maximum number of ongoing requests before blocking. Warning: Setting this value > 1 can cause Loki and Prometheus to complain about entries being delivered out of order."""

    max_payload_size_kb: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadSizeKB")
    ] = 4096
    r"""Maximum size, in KB, of the request body. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited). Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Defaults to Yes. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 15
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Maximum time between requests. Small values can reduce the payload size below the configured 'Max record size' and 'Max events per request'. Warning: Setting this too low can increase the number of ongoing requests (depending on the value of 'Request concurrency'); this can cause Loki and Prometheus to complain about entries being delivered out of order."""

    extra_http_headers: Annotated[
        Optional[List[OutputGrafanaCloudExtraHTTPHeaders]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events"""

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enables round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    failed_request_logging_mode: Annotated[
        Optional[OutputGrafanaCloudFailedRequestLoggingMode],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputGrafanaCloudFailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    response_retry_settings: Annotated[
        Optional[List[OutputGrafanaCloudResponseRetrySettings]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)."""

    timeout_retry_settings: Annotated[
        Optional[OutputGrafanaCloudTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = False
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    on_backpressure: Annotated[
        Optional[OutputGrafanaCloudBackpressureBehavior],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputGrafanaCloudBackpressureBehavior.BLOCK
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""

    description: Optional[str] = None

    compress: Optional[bool] = True
    r"""Whether to compress the payload body before sending. Applies only to Loki's JSON payloads, as both Prometheus' and Loki's Protobuf variant are snappy-compressed by default."""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)."""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Optional[OutputGrafanaCloudCompression], pydantic.Field(alias="pqCompress")
    ] = OutputGrafanaCloudCompression.NONE
    r"""Codec to use to compress the persisted data."""

    pq_on_backpressure: Annotated[
        Optional[OutputGrafanaCloudQueueFullBehavior],
        pydantic.Field(alias="pqOnBackpressure"),
    ] = OutputGrafanaCloudQueueFullBehavior.BLOCK
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[
        Optional[OutputGrafanaCloudMode], pydantic.Field(alias="pqMode")
    ] = OutputGrafanaCloudMode.ERROR
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputGrafanaCloudPqControls], pydantic.Field(alias="pqControls")
    ] = None


OutputGrafanaCloudTypedDict = TypeAliasType(
    "OutputGrafanaCloudTypedDict",
    Union[OutputGrafanaCloud1TypedDict, OutputGrafanaCloud2TypedDict],
)


OutputGrafanaCloud = TypeAliasType(
    "OutputGrafanaCloud", Union[OutputGrafanaCloud1, OutputGrafanaCloud2]
)
