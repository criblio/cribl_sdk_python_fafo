"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


DimKeyFilterTypedDict = TypeAliasType("DimKeyFilterTypedDict", Union[str, List[str]])


DimKeyFilter = TypeAliasType("DimKeyFilter", Union[str, List[str]])


DimValueFilterTypedDict = TypeAliasType(
    "DimValueFilterTypedDict", Union[str, List[str]]
)


DimValueFilter = TypeAliasType("DimValueFilter", Union[str, List[str]])


MetricNameFilterTypedDict = TypeAliasType(
    "MetricNameFilterTypedDict", Union[str, List[str]]
)


MetricNameFilter = TypeAliasType("MetricNameFilter", Union[str, List[str]])


class SystemMetricsEnumTypedDict(TypedDict):
    dim_key_filter: NotRequired[DimKeyFilterTypedDict]
    dim_value_filter: NotRequired[DimValueFilterTypedDict]
    earliest: NotRequired[float]
    filter_expr: NotRequired[str]
    max_values: NotRequired[float]
    metric_name_filter: NotRequired[MetricNameFilterTypedDict]


class SystemMetricsEnum(BaseModel):
    dim_key_filter: Annotated[
        Optional[DimKeyFilter], pydantic.Field(alias="dimKeyFilter")
    ] = None

    dim_value_filter: Annotated[
        Optional[DimValueFilter], pydantic.Field(alias="dimValueFilter")
    ] = None

    earliest: Optional[float] = None

    filter_expr: Annotated[Optional[str], pydantic.Field(alias="filterExpr")] = None

    max_values: Annotated[Optional[float], pydantic.Field(alias="maxValues")] = None

    metric_name_filter: Annotated[
        Optional[MetricNameFilter], pydantic.Field(alias="metricNameFilter")
    ] = None
