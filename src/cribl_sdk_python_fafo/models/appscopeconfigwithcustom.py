"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appscopecustom import AppscopeCustom, AppscopeCustomTypedDict
from .appscopetransport import AppscopeTransport, AppscopeTransportTypedDict
from cribl_sdk_python_fafo.types import BaseModel
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AppscopeConfigWithCustomCriblTypedDict(TypedDict):
    authtoken: NotRequired[str]
    enable: NotRequired[bool]
    transport: NotRequired[AppscopeTransportTypedDict]
    use_scope_source_transport: NotRequired[bool]


class AppscopeConfigWithCustomCribl(BaseModel):
    authtoken: Optional[str] = None

    enable: Optional[bool] = None

    transport: Optional[AppscopeTransport] = None

    use_scope_source_transport: Annotated[
        Optional[bool], pydantic.Field(alias="useScopeSourceTransport")
    ] = None


class AppscopeConfigWithCustomFormatNdjsonTypedDict(TypedDict):
    enhancefs: bool
    maxeventpersec: float


class AppscopeConfigWithCustomFormatNdjson(BaseModel):
    enhancefs: bool

    maxeventpersec: float


class AppscopeConfigWithCustomType(str, Enum):
    NDJSON = "ndjson"


class AppscopeConfigWithCustomWatchTypedDict(TypedDict):
    type: str
    allowbinary: NotRequired[bool]
    enabled: NotRequired[bool]
    field: NotRequired[str]
    headers: NotRequired[str]
    name: NotRequired[str]
    value: NotRequired[str]


class AppscopeConfigWithCustomWatch(BaseModel):
    type: str

    allowbinary: Optional[bool] = None

    enabled: Optional[bool] = None

    field: Optional[str] = None

    headers: Optional[str] = None

    name: Optional[str] = None

    value: Optional[str] = None


class AppscopeConfigWithCustomEventTypedDict(TypedDict):
    enable: bool
    format_: AppscopeConfigWithCustomFormatNdjsonTypedDict
    transport: AppscopeTransportTypedDict
    type: AppscopeConfigWithCustomType
    watch: List[AppscopeConfigWithCustomWatchTypedDict]


class AppscopeConfigWithCustomEvent(BaseModel):
    enable: bool

    format_: Annotated[
        AppscopeConfigWithCustomFormatNdjson, pydantic.Field(alias="format")
    ]

    transport: AppscopeTransport

    type: AppscopeConfigWithCustomType

    watch: List[AppscopeConfigWithCustomWatch]


class AppscopeConfigWithCustomLevel(str, Enum):
    ERROR = "error"
    DEBUG = "debug"
    INFO = "info"
    WARNING = "warning"
    NONE = "none"


class AppscopeConfigWithCustomLogTypedDict(TypedDict):
    level: NotRequired[AppscopeConfigWithCustomLevel]
    transport: NotRequired[AppscopeTransportTypedDict]


class AppscopeConfigWithCustomLog(BaseModel):
    level: Optional[AppscopeConfigWithCustomLevel] = None

    transport: Optional[AppscopeTransport] = None


class AppscopeConfigWithCustomLibscopeTypedDict(TypedDict):
    commanddir: NotRequired[str]
    configevent: NotRequired[bool]
    log: NotRequired[AppscopeConfigWithCustomLogTypedDict]
    summaryperiod: NotRequired[float]


class AppscopeConfigWithCustomLibscope(BaseModel):
    commanddir: Optional[str] = None

    configevent: Optional[bool] = None

    log: Optional[AppscopeConfigWithCustomLog] = None

    summaryperiod: Optional[float] = None


class AppscopeConfigWithCustomMetricFormatTypedDict(TypedDict):
    statsdmaxlen: NotRequired[float]
    statsdprefix: NotRequired[str]
    type: NotRequired[str]
    verbosity: NotRequired[float]


class AppscopeConfigWithCustomMetricFormat(BaseModel):
    statsdmaxlen: Optional[float] = None

    statsdprefix: Optional[str] = None

    type: Optional[str] = None

    verbosity: Optional[float] = None


class AppscopeConfigWithCustomMetricTypedDict(TypedDict):
    enable: bool
    format_: AppscopeConfigWithCustomMetricFormatTypedDict
    transport: AppscopeTransportTypedDict
    watch: List[str]


class AppscopeConfigWithCustomMetric(BaseModel):
    enable: bool

    format_: Annotated[
        AppscopeConfigWithCustomMetricFormat, pydantic.Field(alias="format")
    ]

    transport: AppscopeTransport

    watch: List[str]


class AppscopeConfigWithCustomPayloadTypedDict(TypedDict):
    dir: str
    enable: bool


class AppscopeConfigWithCustomPayload(BaseModel):
    dir: str

    enable: bool


class AppscopeConfigWithCustomProtocolTypedDict(TypedDict):
    binary: bool
    detect: bool
    len: float
    name: str
    payload: bool
    regex: str


class AppscopeConfigWithCustomProtocol(BaseModel):
    binary: bool

    detect: bool

    len: float

    name: str

    payload: bool

    regex: str


class AppscopeConfigWithCustomTagTypedDict(TypedDict):
    key: str
    value: str


class AppscopeConfigWithCustomTag(BaseModel):
    key: str

    value: str


class AppscopeConfigWithCustomTypedDict(TypedDict):
    cribl: NotRequired[AppscopeConfigWithCustomCriblTypedDict]
    custom: NotRequired[List[AppscopeCustomTypedDict]]
    event: NotRequired[AppscopeConfigWithCustomEventTypedDict]
    libscope: NotRequired[AppscopeConfigWithCustomLibscopeTypedDict]
    metric: NotRequired[AppscopeConfigWithCustomMetricTypedDict]
    payload: NotRequired[AppscopeConfigWithCustomPayloadTypedDict]
    protocol: NotRequired[List[AppscopeConfigWithCustomProtocolTypedDict]]
    tags: NotRequired[List[AppscopeConfigWithCustomTagTypedDict]]


class AppscopeConfigWithCustom(BaseModel):
    cribl: Optional[AppscopeConfigWithCustomCribl] = None

    custom: Optional[List[AppscopeCustom]] = None

    event: Optional[AppscopeConfigWithCustomEvent] = None

    libscope: Optional[AppscopeConfigWithCustomLibscope] = None

    metric: Optional[AppscopeConfigWithCustomMetric] = None

    payload: Optional[AppscopeConfigWithCustomPayload] = None

    protocol: Optional[List[AppscopeConfigWithCustomProtocol]] = None

    tags: Optional[List[AppscopeConfigWithCustomTag]] = None
