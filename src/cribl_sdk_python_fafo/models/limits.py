"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .edgeheartbeatmetricsmode import EdgeHeartbeatMetricsMode
from cribl_sdk_python_fafo.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class LimitsSamplesTypedDict(TypedDict):
    max_size: str


class LimitsSamples(BaseModel):
    max_size: Annotated[str, pydantic.Field(alias="maxSize")]


class LimitsTypedDict(TypedDict):
    cpu_profile_ttl: str
    enable_metrics_persistence: bool
    metrics_directory: str
    metrics_fields_blacklist: List[str]
    metrics_gc_period: str
    metrics_never_drop_list: List[str]
    metrics_worker_id_blacklist: List[str]
    min_free_space: str
    samples: LimitsSamplesTypedDict
    disable_metrics_accessor_cache: NotRequired[bool]
    edge_metrics_custom_expression: NotRequired[str]
    edge_metrics_mode: NotRequired[EdgeHeartbeatMetricsMode]
    edge_nodes_count: NotRequired[float]
    events_metadata_sources: NotRequired[List[str]]
    lookup_max_size: NotRequired[str]
    lookup_max_total_size: NotRequired[str]
    max_metrics: NotRequired[float]
    max_pq_size: NotRequired[str]
    metrics_drop_list: NotRequired[List[str]]
    metrics_max_cardinality: NotRequired[float]
    metrics_max_disk_space: NotRequired[str]


class Limits(BaseModel):
    cpu_profile_ttl: Annotated[str, pydantic.Field(alias="cpuProfileTTL")]

    enable_metrics_persistence: Annotated[
        bool, pydantic.Field(alias="enableMetricsPersistence")
    ]

    metrics_directory: Annotated[str, pydantic.Field(alias="metricsDirectory")]

    metrics_fields_blacklist: Annotated[
        List[str], pydantic.Field(alias="metricsFieldsBlacklist")
    ]

    metrics_gc_period: Annotated[str, pydantic.Field(alias="metricsGCPeriod")]

    metrics_never_drop_list: Annotated[
        List[str], pydantic.Field(alias="metricsNeverDropList")
    ]

    metrics_worker_id_blacklist: Annotated[
        List[str], pydantic.Field(alias="metricsWorkerIdBlacklist")
    ]

    min_free_space: Annotated[str, pydantic.Field(alias="minFreeSpace")]

    samples: LimitsSamples

    disable_metrics_accessor_cache: Annotated[
        Optional[bool], pydantic.Field(alias="disableMetricsAccessorCache")
    ] = None

    edge_metrics_custom_expression: Annotated[
        Optional[str], pydantic.Field(alias="edgeMetricsCustomExpression")
    ] = None

    edge_metrics_mode: Annotated[
        Optional[EdgeHeartbeatMetricsMode], pydantic.Field(alias="edgeMetricsMode")
    ] = None

    edge_nodes_count: Annotated[
        Optional[float], pydantic.Field(alias="edgeNodesCount")
    ] = None

    events_metadata_sources: Annotated[
        Optional[List[str]], pydantic.Field(alias="eventsMetadataSources")
    ] = None

    lookup_max_size: Annotated[Optional[str], pydantic.Field(alias="lookupMaxSize")] = (
        None
    )

    lookup_max_total_size: Annotated[
        Optional[str], pydantic.Field(alias="lookupMaxTotalSize")
    ] = None

    max_metrics: Annotated[Optional[float], pydantic.Field(alias="maxMetrics")] = None

    max_pq_size: Annotated[Optional[str], pydantic.Field(alias="maxPQSize")] = None

    metrics_drop_list: Annotated[
        Optional[List[str]], pydantic.Field(alias="metricsDropList")
    ] = None

    metrics_max_cardinality: Annotated[
        Optional[float], pydantic.Field(alias="metricsMaxCardinality")
    ] = None

    metrics_max_disk_space: Annotated[
        Optional[str], pydantic.Field(alias="metricsMaxDiskSpace")
    ] = None
