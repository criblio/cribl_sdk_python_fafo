"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import Any, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OutputXsiamType(str, Enum):
    XSIAM = "xsiam"


class OutputXsiamExtraHTTPHeadersTypedDict(TypedDict):
    value: str
    r"""Field value"""
    name: NotRequired[str]
    r"""Field name"""


class OutputXsiamExtraHTTPHeaders(BaseModel):
    value: str
    r"""Field value"""

    name: Optional[str] = None
    r"""Field name"""


class OutputXsiamFailedRequestLoggingMode(str, Enum):
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    PAYLOAD = "payload"
    PAYLOAD_AND_HEADERS = "payloadAndHeaders"
    NONE = "none"


class OutputXsiamAuthenticationMethod(str, Enum):
    r"""Enter a token directly, or provide a secret referencing a token"""

    TOKEN = "token"
    SECRET = "secret"


class OutputXsiamResponseRetrySettingsTypedDict(TypedDict):
    http_status: float
    r"""The HTTP response status code that will trigger retries"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputXsiamResponseRetrySettings(BaseModel):
    http_status: Annotated[float, pydantic.Field(alias="httpStatus")]
    r"""The HTTP response status code that will trigger retries"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputXsiamTimeoutRetrySettingsTypedDict(TypedDict):
    timeout_retry: NotRequired[bool]
    r"""Enable to retry on request timeout"""
    initial_backoff: NotRequired[float]
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""
    backoff_rate: NotRequired[float]
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""
    max_backoff: NotRequired[float]
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputXsiamTimeoutRetrySettings(BaseModel):
    timeout_retry: Annotated[Optional[bool], pydantic.Field(alias="timeoutRetry")] = (
        False
    )
    r"""Enable to retry on request timeout"""

    initial_backoff: Annotated[
        Optional[float], pydantic.Field(alias="initialBackoff")
    ] = 1000
    r"""How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes)."""

    backoff_rate: Annotated[Optional[float], pydantic.Field(alias="backoffRate")] = 2
    r"""Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc."""

    max_backoff: Annotated[Optional[float], pydantic.Field(alias="maxBackoff")] = 10000
    r"""The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds)."""


class OutputXsiamBackpressureBehavior(str, Enum):
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""

    BLOCK = "block"
    DROP = "drop"
    QUEUE = "queue"


class OutputXsiamUrlsTypedDict(TypedDict):
    url: Any
    weight: NotRequired[float]
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputXsiamUrls(BaseModel):
    url: Any

    weight: Optional[float] = 1
    r"""Assign a weight (>0) to each endpoint to indicate its traffic-handling capability"""


class OutputXsiamCompression(str, Enum):
    r"""Codec to use to compress the persisted data."""

    NONE = "none"
    GZIP = "gzip"


class OutputXsiamQueueFullBehavior(str, Enum):
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    BLOCK = "block"
    DROP = "drop"


class OutputXsiamMode(str, Enum):
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""

    ERROR = "error"
    BACKPRESSURE = "backpressure"
    ALWAYS = "always"


class OutputXsiamPqControlsTypedDict(TypedDict):
    pass


class OutputXsiamPqControls(BaseModel):
    pass


class OutputXsiamTypedDict(TypedDict):
    id: str
    r"""Unique ID for this output"""
    type: OutputXsiamType
    pipeline: NotRequired[str]
    r"""Pipeline to process data before sending out to this output"""
    system_fields: NotRequired[List[str]]
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""
    environment: NotRequired[str]
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""
    streamtags: NotRequired[List[str]]
    r"""Tags for filtering and grouping in @{product}"""
    load_balanced: NotRequired[bool]
    r"""Enable for optimal performance. Even if you have one hostname, it can expand to multiple IPs. If disabled, consider enabling round-robin DNS."""
    concurrency: NotRequired[float]
    r"""Maximum number of ongoing requests before blocking"""
    max_payload_events: NotRequired[float]
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""
    compress: NotRequired[bool]
    r"""Compress the payload body before sending"""
    reject_unauthorized: NotRequired[bool]
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Defaults to Yes. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """
    timeout_sec: NotRequired[float]
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""
    flush_period_sec: NotRequired[float]
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max body size."""
    extra_http_headers: NotRequired[List[OutputXsiamExtraHTTPHeadersTypedDict]]
    r"""Headers to add to all events."""
    failed_request_logging_mode: NotRequired[OutputXsiamFailedRequestLoggingMode]
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""
    safe_headers: NotRequired[List[str]]
    r"""List of headers that are safe to log in plain text"""
    auth_type: NotRequired[OutputXsiamAuthenticationMethod]
    r"""Enter a token directly, or provide a secret referencing a token"""
    response_retry_settings: NotRequired[
        List[OutputXsiamResponseRetrySettingsTypedDict]
    ]
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)."""
    timeout_retry_settings: NotRequired[OutputXsiamTimeoutRetrySettingsTypedDict]
    response_honor_retry_after_header: NotRequired[bool]
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""
    throttle_rate_req_per_sec: NotRequired[int]
    r"""Maximum number of requests to limit to per second"""
    on_backpressure: NotRequired[OutputXsiamBackpressureBehavior]
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""
    description: NotRequired[str]
    url: NotRequired[str]
    r"""XSIAM endpoint URL to send events to, such as https://api-{tenant external URL}/logs/v1/event"""
    use_round_robin_dns: NotRequired[bool]
    r"""Enables round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""
    exclude_self: NotRequired[bool]
    r"""Exclude all IPs of the current host from the list of any resolved hostnames."""
    urls: NotRequired[List[OutputXsiamUrlsTypedDict]]
    dns_resolve_period_sec: NotRequired[float]
    r"""Re-resolve any hostnames every this many seconds and pick up destinations from A records."""
    load_balance_stats_period_sec: NotRequired[float]
    r"""How far back in time to keep traffic stats for load balancing purposes."""
    token: NotRequired[str]
    r"""XSIAM authentication token"""
    text_secret: NotRequired[str]
    r"""Select or create a stored text secret"""
    pq_max_file_size: NotRequired[str]
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)."""
    pq_max_size: NotRequired[str]
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""
    pq_path: NotRequired[str]
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""
    pq_compress: NotRequired[OutputXsiamCompression]
    r"""Codec to use to compress the persisted data."""
    pq_on_backpressure: NotRequired[OutputXsiamQueueFullBehavior]
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""
    pq_mode: NotRequired[OutputXsiamMode]
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""
    pq_controls: NotRequired[OutputXsiamPqControlsTypedDict]


class OutputXsiam(BaseModel):
    id: str
    r"""Unique ID for this output"""

    type: OutputXsiamType

    pipeline: Optional[str] = None
    r"""Pipeline to process data before sending out to this output"""

    system_fields: Annotated[
        Optional[List[str]], pydantic.Field(alias="systemFields")
    ] = None
    r"""Fields to automatically add to events, such as cribl_pipe. Supports wildcards."""

    environment: Optional[str] = None
    r"""Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere."""

    streamtags: Optional[List[str]] = None
    r"""Tags for filtering and grouping in @{product}"""

    load_balanced: Annotated[Optional[bool], pydantic.Field(alias="loadBalanced")] = (
        False
    )
    r"""Enable for optimal performance. Even if you have one hostname, it can expand to multiple IPs. If disabled, consider enabling round-robin DNS."""

    concurrency: Optional[float] = 5
    r"""Maximum number of ongoing requests before blocking"""

    max_payload_events: Annotated[
        Optional[float], pydantic.Field(alias="maxPayloadEvents")
    ] = 0
    r"""Maximum number of events to include in the request body. Default is 0 (unlimited)."""

    compress: Optional[bool] = True
    r"""Compress the payload body before sending"""

    reject_unauthorized: Annotated[
        Optional[bool], pydantic.Field(alias="rejectUnauthorized")
    ] = True
    r"""Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
    Defaults to Yes. When this setting is also present in TLS Settings (Client Side),
    that value will take precedence.
    """

    timeout_sec: Annotated[Optional[float], pydantic.Field(alias="timeoutSec")] = 30
    r"""Amount of time, in seconds, to wait for a request to complete before canceling it"""

    flush_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="flushPeriodSec")
    ] = 1
    r"""Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max body size."""

    extra_http_headers: Annotated[
        Optional[List[OutputXsiamExtraHTTPHeaders]],
        pydantic.Field(alias="extraHttpHeaders"),
    ] = None
    r"""Headers to add to all events."""

    failed_request_logging_mode: Annotated[
        Optional[OutputXsiamFailedRequestLoggingMode],
        pydantic.Field(alias="failedRequestLoggingMode"),
    ] = OutputXsiamFailedRequestLoggingMode.NONE
    r"""Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below."""

    safe_headers: Annotated[
        Optional[List[str]], pydantic.Field(alias="safeHeaders")
    ] = None
    r"""List of headers that are safe to log in plain text"""

    auth_type: Annotated[
        Optional[OutputXsiamAuthenticationMethod], pydantic.Field(alias="authType")
    ] = OutputXsiamAuthenticationMethod.TOKEN
    r"""Enter a token directly, or provide a secret referencing a token"""

    response_retry_settings: Annotated[
        Optional[List[OutputXsiamResponseRetrySettings]],
        pydantic.Field(alias="responseRetrySettings"),
    ] = None
    r"""Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable)."""

    timeout_retry_settings: Annotated[
        Optional[OutputXsiamTimeoutRetrySettings],
        pydantic.Field(alias="timeoutRetrySettings"),
    ] = None

    response_honor_retry_after_header: Annotated[
        Optional[bool], pydantic.Field(alias="responseHonorRetryAfterHeader")
    ] = False
    r"""Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored."""

    throttle_rate_req_per_sec: Annotated[
        Optional[int], pydantic.Field(alias="throttleRateReqPerSec")
    ] = 400
    r"""Maximum number of requests to limit to per second"""

    on_backpressure: Annotated[
        Optional[OutputXsiamBackpressureBehavior],
        pydantic.Field(alias="onBackpressure"),
    ] = OutputXsiamBackpressureBehavior.BLOCK
    r"""Whether to block, drop, or queue events when all receivers are exerting backpressure."""

    description: Optional[str] = None

    url: Optional[str] = "http://localhost:8088/logs/v1/event"
    r"""XSIAM endpoint URL to send events to, such as https://api-{tenant external URL}/logs/v1/event"""

    use_round_robin_dns: Annotated[
        Optional[bool], pydantic.Field(alias="useRoundRobinDns")
    ] = False
    r"""Enables round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations."""

    exclude_self: Annotated[Optional[bool], pydantic.Field(alias="excludeSelf")] = False
    r"""Exclude all IPs of the current host from the list of any resolved hostnames."""

    urls: Optional[List[OutputXsiamUrls]] = None

    dns_resolve_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="dnsResolvePeriodSec")
    ] = 600
    r"""Re-resolve any hostnames every this many seconds and pick up destinations from A records."""

    load_balance_stats_period_sec: Annotated[
        Optional[float], pydantic.Field(alias="loadBalanceStatsPeriodSec")
    ] = 300
    r"""How far back in time to keep traffic stats for load balancing purposes."""

    token: Optional[str] = None
    r"""XSIAM authentication token"""

    text_secret: Annotated[Optional[str], pydantic.Field(alias="textSecret")] = None
    r"""Select or create a stored text secret"""

    pq_max_file_size: Annotated[
        Optional[str], pydantic.Field(alias="pqMaxFileSize")
    ] = "1 MB"
    r"""The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.)."""

    pq_max_size: Annotated[Optional[str], pydantic.Field(alias="pqMaxSize")] = "5GB"
    r"""The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc."""

    pq_path: Annotated[Optional[str], pydantic.Field(alias="pqPath")] = (
        "$CRIBL_HOME/state/queues"
    )
    r"""The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>."""

    pq_compress: Annotated[
        Optional[OutputXsiamCompression], pydantic.Field(alias="pqCompress")
    ] = OutputXsiamCompression.NONE
    r"""Codec to use to compress the persisted data."""

    pq_on_backpressure: Annotated[
        Optional[OutputXsiamQueueFullBehavior], pydantic.Field(alias="pqOnBackpressure")
    ] = OutputXsiamQueueFullBehavior.BLOCK
    r"""Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged."""

    pq_mode: Annotated[Optional[OutputXsiamMode], pydantic.Field(alias="pqMode")] = (
        OutputXsiamMode.ERROR
    )
    r"""In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem."""

    pq_controls: Annotated[
        Optional[OutputXsiamPqControls], pydantic.Field(alias="pqControls")
    ] = None
