"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_sdk_python_fafo.types import BaseModel
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


ActionTypedDict = TypeAliasType("ActionTypedDict", Union[str, List[str]])


Action = TypeAliasType("Action", Union[str, List[str]])


class StringEqualsTypedDict(TypedDict):
    pass


class StringEquals(BaseModel):
    pass


class AMTrustPolicyConditionTypedDict(TypedDict):
    string_equals: NotRequired[StringEqualsTypedDict]


class AMTrustPolicyCondition(BaseModel):
    string_equals: Annotated[
        Optional[StringEquals], pydantic.Field(alias="StringEquals")
    ] = None


class PrincipalTypedDict(TypedDict):
    aws: str


class Principal(BaseModel):
    aws: Annotated[str, pydantic.Field(alias="AWS")]


class StatementTypedDict(TypedDict):
    action: ActionTypedDict
    effect: str
    principal: PrincipalTypedDict
    condition: NotRequired[AMTrustPolicyConditionTypedDict]


class Statement(BaseModel):
    action: Annotated[Action, pydantic.Field(alias="Action")]

    effect: Annotated[str, pydantic.Field(alias="Effect")]

    principal: Annotated[Principal, pydantic.Field(alias="Principal")]

    condition: Annotated[
        Optional[AMTrustPolicyCondition], pydantic.Field(alias="Condition")
    ] = None


class AMTrustPolicyTypedDict(TypedDict):
    statement: List[StatementTypedDict]
    version: str


class AMTrustPolicy(BaseModel):
    statement: Annotated[List[Statement], pydantic.Field(alias="Statement")]

    version: Annotated[str, pydantic.Field(alias="Version")]
