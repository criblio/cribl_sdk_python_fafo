// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type Reason string

const (
	ReasonQueueNotHealthy    Reason = "QUEUE_NOT_HEALTHY"
	ReasonServiceUnavailable Reason = "SERVICE_UNAVAILABLE"
	ReasonStatusCheckFailed  Reason = "STATUS_CHECK_FAILED"
)

func (e Reason) ToPointer() *Reason {
	return &e
}
func (e *Reason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUE_NOT_HEALTHY":
		fallthrough
	case "SERVICE_UNAVAILABLE":
		fallthrough
	case "STATUS_CHECK_FAILED":
		*e = Reason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Reason: %v", v)
	}
}

type StatusRed string

const (
	StatusRedRed StatusRed = "red"
)

func (e StatusRed) ToPointer() *StatusRed {
	return &e
}
func (e *StatusRed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "red":
		*e = StatusRed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusRed: %v", v)
	}
}

type SearchHealthCheckStatusRed struct {
	Reason     Reason    `json:"reason"`
	ReportedAt float64   `json:"reported_at"`
	Status     StatusRed `json:"status"`
}

func (o *SearchHealthCheckStatusRed) GetReason() Reason {
	if o == nil {
		return Reason("")
	}
	return o.Reason
}

func (o *SearchHealthCheckStatusRed) GetReportedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ReportedAt
}

func (o *SearchHealthCheckStatusRed) GetStatus() StatusRed {
	if o == nil {
		return StatusRed("")
	}
	return o.Status
}

type StatusGreen string

const (
	StatusGreenGreen StatusGreen = "green"
)

func (e StatusGreen) ToPointer() *StatusGreen {
	return &e
}
func (e *StatusGreen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "green":
		*e = StatusGreen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StatusGreen: %v", v)
	}
}

type SearchHealthCheckStatusGreen struct {
	ReportedAt float64     `json:"reported_at"`
	Status     StatusGreen `json:"status"`
}

func (o *SearchHealthCheckStatusGreen) GetReportedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ReportedAt
}

func (o *SearchHealthCheckStatusGreen) GetStatus() StatusGreen {
	if o == nil {
		return StatusGreen("")
	}
	return o.Status
}

type SearchHealthCheckStatusType string

const (
	SearchHealthCheckStatusTypeSearchHealthCheckStatusGreen SearchHealthCheckStatusType = "SearchHealthCheckStatus_Green"
	SearchHealthCheckStatusTypeSearchHealthCheckStatusRed   SearchHealthCheckStatusType = "SearchHealthCheckStatus_Red"
)

type SearchHealthCheckStatus struct {
	SearchHealthCheckStatusGreen *SearchHealthCheckStatusGreen `queryParam:"inline"`
	SearchHealthCheckStatusRed   *SearchHealthCheckStatusRed   `queryParam:"inline"`

	Type SearchHealthCheckStatusType
}

func CreateSearchHealthCheckStatusSearchHealthCheckStatusGreen(searchHealthCheckStatusGreen SearchHealthCheckStatusGreen) SearchHealthCheckStatus {
	typ := SearchHealthCheckStatusTypeSearchHealthCheckStatusGreen

	return SearchHealthCheckStatus{
		SearchHealthCheckStatusGreen: &searchHealthCheckStatusGreen,
		Type:                         typ,
	}
}

func CreateSearchHealthCheckStatusSearchHealthCheckStatusRed(searchHealthCheckStatusRed SearchHealthCheckStatusRed) SearchHealthCheckStatus {
	typ := SearchHealthCheckStatusTypeSearchHealthCheckStatusRed

	return SearchHealthCheckStatus{
		SearchHealthCheckStatusRed: &searchHealthCheckStatusRed,
		Type:                       typ,
	}
}

func (u *SearchHealthCheckStatus) UnmarshalJSON(data []byte) error {

	var searchHealthCheckStatusGreen SearchHealthCheckStatusGreen = SearchHealthCheckStatusGreen{}
	if err := utils.UnmarshalJSON(data, &searchHealthCheckStatusGreen, "", true, true); err == nil {
		u.SearchHealthCheckStatusGreen = &searchHealthCheckStatusGreen
		u.Type = SearchHealthCheckStatusTypeSearchHealthCheckStatusGreen
		return nil
	}

	var searchHealthCheckStatusRed SearchHealthCheckStatusRed = SearchHealthCheckStatusRed{}
	if err := utils.UnmarshalJSON(data, &searchHealthCheckStatusRed, "", true, true); err == nil {
		u.SearchHealthCheckStatusRed = &searchHealthCheckStatusRed
		u.Type = SearchHealthCheckStatusTypeSearchHealthCheckStatusRed
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SearchHealthCheckStatus", string(data))
}

func (u SearchHealthCheckStatus) MarshalJSON() ([]byte, error) {
	if u.SearchHealthCheckStatusGreen != nil {
		return utils.MarshalJSON(u.SearchHealthCheckStatusGreen, "", true)
	}

	if u.SearchHealthCheckStatusRed != nil {
		return utils.MarshalJSON(u.SearchHealthCheckStatusRed, "", true)
	}

	return nil, errors.New("could not marshal union type SearchHealthCheckStatus: all fields are null")
}
