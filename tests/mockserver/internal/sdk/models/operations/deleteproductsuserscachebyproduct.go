// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// DeleteProductsUsersCacheByProductProduct - product by which to filter members
type DeleteProductsUsersCacheByProductProduct string

const (
	DeleteProductsUsersCacheByProductProductStream DeleteProductsUsersCacheByProductProduct = "stream"
	DeleteProductsUsersCacheByProductProductEdge   DeleteProductsUsersCacheByProductProduct = "edge"
	DeleteProductsUsersCacheByProductProductSearch DeleteProductsUsersCacheByProductProduct = "search"
	DeleteProductsUsersCacheByProductProductLake   DeleteProductsUsersCacheByProductProduct = "lake"
)

func (e DeleteProductsUsersCacheByProductProduct) ToPointer() *DeleteProductsUsersCacheByProductProduct {
	return &e
}
func (e *DeleteProductsUsersCacheByProductProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		fallthrough
	case "search":
		fallthrough
	case "lake":
		*e = DeleteProductsUsersCacheByProductProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteProductsUsersCacheByProductProduct: %v", v)
	}
}

type DeleteProductsUsersCacheByProductRequest struct {
	// product by which to filter members
	Product DeleteProductsUsersCacheByProductProduct `pathParam:"style=simple,explode=false,name=product"`
}

func (o *DeleteProductsUsersCacheByProductRequest) GetProduct() DeleteProductsUsersCacheByProductProduct {
	if o == nil {
		return DeleteProductsUsersCacheByProductProduct("")
	}
	return o.Product
}

// DeleteProductsUsersCacheByProductResponseBody - a list of any objects
type DeleteProductsUsersCacheByProductResponseBody struct {
	// number of items present in the items array
	Count *int64           `json:"count,omitempty"`
	Items []map[string]any `json:"items,omitempty"`
}

func (o *DeleteProductsUsersCacheByProductResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *DeleteProductsUsersCacheByProductResponseBody) GetItems() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Items
}

type DeleteProductsUsersCacheByProductResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of any objects
	Object *DeleteProductsUsersCacheByProductResponseBody
}

func (o *DeleteProductsUsersCacheByProductResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DeleteProductsUsersCacheByProductResponse) GetObject() *DeleteProductsUsersCacheByProductResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
