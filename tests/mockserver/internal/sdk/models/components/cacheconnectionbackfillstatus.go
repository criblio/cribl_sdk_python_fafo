// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CacheConnectionBackfillStatus string

const (
	CacheConnectionBackfillStatusScheduled  CacheConnectionBackfillStatus = "scheduled"
	CacheConnectionBackfillStatusPending    CacheConnectionBackfillStatus = "pending"
	CacheConnectionBackfillStatusStarted    CacheConnectionBackfillStatus = "started"
	CacheConnectionBackfillStatusFinished   CacheConnectionBackfillStatus = "finished"
	CacheConnectionBackfillStatusIncomplete CacheConnectionBackfillStatus = "incomplete"
)

func (e CacheConnectionBackfillStatus) ToPointer() *CacheConnectionBackfillStatus {
	return &e
}
func (e *CacheConnectionBackfillStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "scheduled":
		fallthrough
	case "pending":
		fallthrough
	case "started":
		fallthrough
	case "finished":
		fallthrough
	case "incomplete":
		*e = CacheConnectionBackfillStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CacheConnectionBackfillStatus: %v", v)
	}
}
