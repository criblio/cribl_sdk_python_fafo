"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .samplefile import SampleFile, SampleFileTypedDict
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetEdgeFileSampleRequestTypedDict(TypedDict):
    path: str
    r"""The path to the file to sample"""
    bytes_requested: NotRequired[float]
    r"""The number of bytes to return;   this value could be constrained by system limits."""


class GetEdgeFileSampleRequest(BaseModel):
    path: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""The path to the file to sample"""

    bytes_requested: Annotated[
        Optional[float],
        pydantic.Field(alias="bytesRequested"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The number of bytes to return;   this value could be constrained by system limits."""


class GetEdgeFileSampleResponseBodyTypedDict(TypedDict):
    r"""a list of SampleFile objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[SampleFileTypedDict]]


class GetEdgeFileSampleResponseBody(BaseModel):
    r"""a list of SampleFile objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[SampleFile]] = None
