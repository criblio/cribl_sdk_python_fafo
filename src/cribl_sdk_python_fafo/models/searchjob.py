"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .cputimemetric import CPUTimeMetric, CPUTimeMetricTypedDict
from .datatypeoverrides import DatatypeOverrides, DatatypeOverridesTypedDict
from .searchauditmetrics import SearchAuditMetrics, SearchAuditMetricsTypedDict
from .searchjoberrorstateconfig import (
    SearchJobErrorStateConfig,
    SearchJobErrorStateConfigTypedDict,
)
from .searchjobmetadata import SearchJobMetadata, SearchJobMetadataTypedDict
from .searchjobstageconfig import SearchJobStageConfig, SearchJobStageConfigTypedDict
from .searchparameter import SearchParameter, SearchParameterTypedDict
from .tableviewsettings import TableViewSettings, TableViewSettingsTypedDict
from cribl_sdk_python_fafo.types import BaseModel
from enum import Enum
import pydantic
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class CompatibilityChecksTypedDict(TypedDict):
    datatypes: NotRequired[bool]
    stage_ids: NotRequired[List[str]]


class CompatibilityChecks(BaseModel):
    datatypes: Optional[bool] = None

    stage_ids: Annotated[Optional[List[str]], pydantic.Field(alias="stageIds")] = None


SearchJobEarliestTypedDict = TypeAliasType(
    "SearchJobEarliestTypedDict", Union[str, float]
)


SearchJobEarliest = TypeAliasType("SearchJobEarliest", Union[str, float])


SearchJobLatestTypedDict = TypeAliasType("SearchJobLatestTypedDict", Union[str, float])


SearchJobLatest = TypeAliasType("SearchJobLatest", Union[str, float])


class SearchJobStatus(str, Enum):
    NEW = "new"
    FAILED = "failed"
    RUNNING = "running"
    COMPLETED = "completed"
    CANCELED = "canceled"
    QUEUED = "queued"


class SearchJobType(str, Enum):
    COMMAND = "command"
    SCHEDULED = "scheduled"
    STANDARD = "standard"
    DATATYPE_PREVIEW = "datatypePreview"
    DASHBOARD = "dashboard"
    NOTEBOOK = "notebook"


class SearchJobTypedDict(TypedDict):
    display_username: str
    group: str
    id: str
    query: str
    status: SearchJobStatus
    time_created: float
    time_started: float
    user: str
    accelerated: NotRequired[bool]
    alias_of_original_job_id: NotRequired[str]
    compatibility_checks: NotRequired[CompatibilityChecksTypedDict]
    completion_info: NotRequired[str]
    context: NotRequired[str]
    correlation_id: NotRequired[str]
    cpu_metrics: NotRequired[CPUTimeMetricTypedDict]
    datatype_overrides: NotRequired[DatatypeOverridesTypedDict]
    disable_notifications: NotRequired[bool]
    earliest: NotRequired[SearchJobEarliestTypedDict]
    earliest_epoch: NotRequired[float]
    error_state_config: NotRequired[SearchJobErrorStateConfigTypedDict]
    is_private: NotRequired[bool]
    latest: NotRequired[SearchJobLatestTypedDict]
    latest_epoch: NotRequired[float]
    metadata: NotRequired[SearchJobMetadataTypedDict]
    notebook_id: NotRequired[str]
    num_events_after: NotRequired[float]
    num_events_before: NotRequired[float]
    query_with_macros_resolved: NotRequired[str]
    sample_rate: NotRequired[float]
    saved_query_name: NotRequired[str]
    search_parameter_declarations: NotRequired[List[SearchParameterTypedDict]]
    search_parameter_values: NotRequired[Any]
    stages: NotRequired[List[SearchJobStageConfigTypedDict]]
    table_config: NotRequired[TableViewSettingsTypedDict]
    target_event_time: NotRequired[float]
    time_completed: NotRequired[float]
    time_to_first_byte: NotRequired[float]
    total_bytes_scanned: NotRequired[float]
    total_event_count: NotRequired[float]
    type: NotRequired[SearchJobType]
    usage_group_id: NotRequired[str]
    usage_metrics: NotRequired[SearchAuditMetricsTypedDict]


class SearchJob(BaseModel):
    display_username: Annotated[str, pydantic.Field(alias="displayUsername")]

    group: str

    id: str

    query: str

    status: SearchJobStatus

    time_created: Annotated[float, pydantic.Field(alias="timeCreated")]

    time_started: Annotated[float, pydantic.Field(alias="timeStarted")]

    user: str

    accelerated: Optional[bool] = None

    alias_of_original_job_id: Annotated[
        Optional[str], pydantic.Field(alias="aliasOfOriginalJobId")
    ] = None

    compatibility_checks: Annotated[
        Optional[CompatibilityChecks], pydantic.Field(alias="compatibilityChecks")
    ] = None

    completion_info: Annotated[
        Optional[str], pydantic.Field(alias="completionInfo")
    ] = None

    context: Optional[str] = None

    correlation_id: Annotated[Optional[str], pydantic.Field(alias="correlationId")] = (
        None
    )

    cpu_metrics: Annotated[
        Optional[CPUTimeMetric], pydantic.Field(alias="cpuMetrics")
    ] = None

    datatype_overrides: Annotated[
        Optional[DatatypeOverrides], pydantic.Field(alias="datatypeOverrides")
    ] = None

    disable_notifications: Annotated[
        Optional[bool], pydantic.Field(alias="disableNotifications")
    ] = None

    earliest: Optional[SearchJobEarliest] = None

    earliest_epoch: Annotated[
        Optional[float], pydantic.Field(alias="earliestEpoch")
    ] = None

    error_state_config: Annotated[
        Optional[SearchJobErrorStateConfig], pydantic.Field(alias="errorStateConfig")
    ] = None

    is_private: Annotated[Optional[bool], pydantic.Field(alias="isPrivate")] = None

    latest: Optional[SearchJobLatest] = None

    latest_epoch: Annotated[Optional[float], pydantic.Field(alias="latestEpoch")] = None

    metadata: Optional[SearchJobMetadata] = None

    notebook_id: Annotated[Optional[str], pydantic.Field(alias="notebookId")] = None

    num_events_after: Annotated[
        Optional[float], pydantic.Field(alias="numEventsAfter")
    ] = None

    num_events_before: Annotated[
        Optional[float], pydantic.Field(alias="numEventsBefore")
    ] = None

    query_with_macros_resolved: Annotated[
        Optional[str], pydantic.Field(alias="queryWithMacrosResolved")
    ] = None

    sample_rate: Annotated[Optional[float], pydantic.Field(alias="sampleRate")] = None

    saved_query_name: Annotated[
        Optional[str], pydantic.Field(alias="savedQueryName")
    ] = None

    search_parameter_declarations: Annotated[
        Optional[List[SearchParameter]],
        pydantic.Field(alias="searchParameterDeclarations"),
    ] = None

    search_parameter_values: Annotated[
        Optional[Any], pydantic.Field(alias="searchParameterValues")
    ] = None

    stages: Optional[List[SearchJobStageConfig]] = None

    table_config: Annotated[
        Optional[TableViewSettings], pydantic.Field(alias="tableConfig")
    ] = None

    target_event_time: Annotated[
        Optional[float], pydantic.Field(alias="targetEventTime")
    ] = None

    time_completed: Annotated[
        Optional[float], pydantic.Field(alias="timeCompleted")
    ] = None

    time_to_first_byte: Annotated[
        Optional[float], pydantic.Field(alias="timeToFirstByte")
    ] = None

    total_bytes_scanned: Annotated[
        Optional[float], pydantic.Field(alias="totalBytesScanned")
    ] = None

    total_event_count: Annotated[
        Optional[float], pydantic.Field(alias="totalEventCount")
    ] = None

    type: Optional[SearchJobType] = None

    usage_group_id: Annotated[Optional[str], pydantic.Field(alias="usageGroupId")] = (
        None
    )

    usage_metrics: Annotated[
        Optional[SearchAuditMetrics], pydantic.Field(alias="usageMetrics")
    ] = None
