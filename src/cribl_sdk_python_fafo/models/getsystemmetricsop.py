"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl_sdk_python_fafo.types import BaseModel
from cribl_sdk_python_fafo.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GetSystemMetricsRequestTypedDict(TypedDict):
    wp: NotRequired[str]
    r"""worker process to query, this would work only on a worker node"""
    num_buckets: NotRequired[float]
    r"""buckets in the past to include in the query results"""
    earliest: NotRequired[str]
    r"""earliest time to query against"""
    latest: NotRequired[str]
    r"""latest time to query against"""
    metric_name_filter: NotRequired[str]
    r"""can be a regex or an array of metric names"""
    filter_expr: NotRequired[str]
    r"""a js expression to apply against the metrics returned (can filter dimensions)"""


class GetSystemMetricsRequest(BaseModel):
    wp: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""worker process to query, this would work only on a worker node"""

    num_buckets: Annotated[
        Optional[float],
        pydantic.Field(alias="numBuckets"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""buckets in the past to include in the query results"""

    earliest: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""earliest time to query against"""

    latest: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""latest time to query against"""

    metric_name_filter: Annotated[
        Optional[str],
        pydantic.Field(alias="metricNameFilter"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""can be a regex or an array of metric names"""

    filter_expr: Annotated[
        Optional[str],
        pydantic.Field(alias="filterExpr"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""a js expression to apply against the metrics returned (can filter dimensions)"""


class GetSystemMetricsResponseTypedDict(TypedDict):
    r"""a list of Response objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[Dict[str, Any]]]


class GetSystemMetricsResponse(BaseModel):
    r"""a list of Response objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Dict[str, Any]]] = None
