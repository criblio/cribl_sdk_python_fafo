"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .productcosts import ProductCosts, ProductCostsTypedDict
from cribl.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CostsTypedDict(TypedDict):
    cribl_cloud_edge_nodes_and_fleets: NotRequired[ProductCostsTypedDict]
    connected_environments: NotRequired[ProductCostsTypedDict]
    stream_cribl_managed_cloud_workers: NotRequired[ProductCostsTypedDict]
    search: NotRequired[ProductCostsTypedDict]
    stream_customer_managed_hybrid_workers: NotRequired[ProductCostsTypedDict]
    lake: NotRequired[ProductCostsTypedDict]
    lakehouse: NotRequired[ProductCostsTypedDict]


class Costs(BaseModel):
    cribl_cloud_edge_nodes_and_fleets: Annotated[
        Optional[ProductCosts], pydantic.Field(alias="Cribl.Cloud-Edge Nodes & Fleets")
    ] = None

    connected_environments: Annotated[
        Optional[ProductCosts], pydantic.Field(alias="Connected Environments")
    ] = None

    stream_cribl_managed_cloud_workers: Annotated[
        Optional[ProductCosts],
        pydantic.Field(alias="Stream Cribl-Managed Cloud Workers"),
    ] = None

    search: Annotated[Optional[ProductCosts], pydantic.Field(alias="Search")] = None

    stream_customer_managed_hybrid_workers: Annotated[
        Optional[ProductCosts],
        pydantic.Field(alias="Stream Customer-Managed Hybrid Workers"),
    ] = None

    lake: Annotated[Optional[ProductCosts], pydantic.Field(alias="Lake")] = None

    lakehouse: Annotated[Optional[ProductCosts], pydantic.Field(alias="Lakehouse")] = (
        None
    )


class GetCostsDTOTypedDict(TypedDict):
    starting_on: str
    ending_before: str
    costs: CostsTypedDict


class GetCostsDTO(BaseModel):
    starting_on: Annotated[str, pydantic.Field(alias="startingOn")]

    ending_before: Annotated[str, pydantic.Field(alias="endingBefore")]

    costs: Costs
