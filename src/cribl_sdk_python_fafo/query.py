"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from cribl_sdk_python_fafo import errors, models, utils
from cribl_sdk_python_fafo._hooks import HookContext
from cribl_sdk_python_fafo.types import OptionalNullable, UNSET
from cribl_sdk_python_fafo.utils import get_security_from_env, jsonl
from typing import Any, Mapping, Optional


class Query(BaseSDK):
    r"""Actions related to Query"""

    def get_search_query(
        self,
        *,
        query_id: Optional[str] = None,
        job_id: Optional[str] = None,
        query: Optional[str] = None,
        earliest: Optional[float] = None,
        latest: Optional[float] = None,
        sample_rate: Optional[float] = None,
        force: Optional[bool] = None,
        offset: Optional[float] = None,
        limit: Optional[float] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> jsonl.JsonLStream[models.SearchJobResults]:
        r"""Runs the query and returns the results

        Runs the query and returns the results

        :param query_id: Saved query ID
        :param job_id: Job ID
        :param query: Search query string
        :param earliest: Beginning of query time range, inclusive, in a relative time format or seconds
        :param latest: End of query time range, exclusive, in a relative time format or seconds
        :param sample_rate: Number between 0-1 to sample events during search
        :param force: When true, forces to run the scheduled query
        :param offset: Pagination offset
        :param limit: Pagination limit - maximum number of events to return
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetSearchQueryRequest(
            query_id=query_id,
            job_id=job_id,
            query=query,
            earliest=earliest,
            latest=latest,
            sample_rate=sample_rate,
            force=force,
            offset=offset,
            limit=limit,
        )

        req = self._build_request(
            method="GET",
            path="/search/query",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/x-ndjson",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getSearchQuery",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/x-ndjson"):
            return jsonl.JsonLStream(
                http_res, lambda raw: utils.unmarshal_json(raw, models.SearchJobResults)
            )
        if utils.match_response(http_res, "500", "application/json"):
            http_res_text = utils.stream_to_text(http_res)
            response_data = utils.unmarshal_json(http_res_text, errors.ErrorData)
            raise errors.Error(data=response_data)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_search_query_async(
        self,
        *,
        query_id: Optional[str] = None,
        job_id: Optional[str] = None,
        query: Optional[str] = None,
        earliest: Optional[float] = None,
        latest: Optional[float] = None,
        sample_rate: Optional[float] = None,
        force: Optional[bool] = None,
        offset: Optional[float] = None,
        limit: Optional[float] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> jsonl.JsonLStreamAsync[models.SearchJobResults]:
        r"""Runs the query and returns the results

        Runs the query and returns the results

        :param query_id: Saved query ID
        :param job_id: Job ID
        :param query: Search query string
        :param earliest: Beginning of query time range, inclusive, in a relative time format or seconds
        :param latest: End of query time range, exclusive, in a relative time format or seconds
        :param sample_rate: Number between 0-1 to sample events during search
        :param force: When true, forces to run the scheduled query
        :param offset: Pagination offset
        :param limit: Pagination limit - maximum number of events to return
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetSearchQueryRequest(
            query_id=query_id,
            job_id=job_id,
            query=query,
            earliest=earliest,
            latest=latest,
            sample_rate=sample_rate,
            force=force,
            offset=offset,
            limit=limit,
        )

        req = self._build_request_async(
            method="GET",
            path="/search/query",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/x-ndjson",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getSearchQuery",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["401", "4XX", "500", "5XX"],
            stream=True,
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/x-ndjson"):
            return jsonl.JsonLStreamAsync(
                http_res, lambda raw: utils.unmarshal_json(raw, models.SearchJobResults)
            )
        if utils.match_response(http_res, "500", "application/json"):
            http_res_text = await utils.stream_to_text_async(http_res)
            response_data = utils.unmarshal_json(http_res_text, errors.ErrorData)
            raise errors.Error(data=response_data)
        if utils.match_response(http_res, ["401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
