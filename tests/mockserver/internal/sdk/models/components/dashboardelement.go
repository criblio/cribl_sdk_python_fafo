// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type DashboardElementType string

const (
	DashboardElementTypeMarkdownDefault DashboardElementType = "markdown.default"
)

func (e DashboardElementType) ToPointer() *DashboardElementType {
	return &e
}
func (e *DashboardElementType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown.default":
		*e = DashboardElementType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DashboardElementType: %v", v)
	}
}

type VariantMarkdown string

const (
	VariantMarkdownMarkdown VariantMarkdown = "markdown"
)

func (e VariantMarkdown) ToPointer() *VariantMarkdown {
	return &e
}
func (e *VariantMarkdown) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown":
		*e = VariantMarkdown(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VariantMarkdown: %v", v)
	}
}

type DashboardElementMarkdown struct {
	Description     *string              `json:"description,omitempty"`
	Empty           *bool                `json:"empty,omitempty"`
	HidePanel       *bool                `json:"hidePanel,omitempty"`
	HorizontalChart *bool                `json:"horizontalChart,omitempty"`
	ID              string               `json:"id"`
	Index           *float64             `json:"index,omitempty"`
	Layout          DashboardLayout      `json:"layout"`
	Title           *string              `json:"title,omitempty"`
	Type            DashboardElementType `json:"type"`
	Variant         VariantMarkdown      `json:"variant"`
}

func (o *DashboardElementMarkdown) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DashboardElementMarkdown) GetEmpty() *bool {
	if o == nil {
		return nil
	}
	return o.Empty
}

func (o *DashboardElementMarkdown) GetHidePanel() *bool {
	if o == nil {
		return nil
	}
	return o.HidePanel
}

func (o *DashboardElementMarkdown) GetHorizontalChart() *bool {
	if o == nil {
		return nil
	}
	return o.HorizontalChart
}

func (o *DashboardElementMarkdown) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DashboardElementMarkdown) GetIndex() *float64 {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *DashboardElementMarkdown) GetLayout() DashboardLayout {
	if o == nil {
		return DashboardLayout{}
	}
	return o.Layout
}

func (o *DashboardElementMarkdown) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *DashboardElementMarkdown) GetType() DashboardElementType {
	if o == nil {
		return DashboardElementType("")
	}
	return o.Type
}

func (o *DashboardElementMarkdown) GetVariant() VariantMarkdown {
	if o == nil {
		return VariantMarkdown("")
	}
	return o.Variant
}

type VariantInput string

const (
	VariantInputInput VariantInput = "input"
)

func (e VariantInput) ToPointer() *VariantInput {
	return &e
}
func (e *VariantInput) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "input":
		*e = VariantInput(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VariantInput: %v", v)
	}
}

type DashboardElementInput struct {
	Description     *string           `json:"description,omitempty"`
	Empty           *bool             `json:"empty,omitempty"`
	HidePanel       *bool             `json:"hidePanel,omitempty"`
	HorizontalChart *bool             `json:"horizontalChart,omitempty"`
	ID              string            `json:"id"`
	Index           *float64          `json:"index,omitempty"`
	InputID         string            `json:"inputId"`
	Layout          DashboardLayout   `json:"layout"`
	Search          *SearchQueryUnion `json:"search,omitempty"`
	Title           *string           `json:"title,omitempty"`
	Type            InputElementType  `json:"type"`
	Value           map[string]any    `json:"value,omitempty"`
	Variant         VariantInput      `json:"variant"`
}

func (o *DashboardElementInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DashboardElementInput) GetEmpty() *bool {
	if o == nil {
		return nil
	}
	return o.Empty
}

func (o *DashboardElementInput) GetHidePanel() *bool {
	if o == nil {
		return nil
	}
	return o.HidePanel
}

func (o *DashboardElementInput) GetHorizontalChart() *bool {
	if o == nil {
		return nil
	}
	return o.HorizontalChart
}

func (o *DashboardElementInput) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DashboardElementInput) GetIndex() *float64 {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *DashboardElementInput) GetInputID() string {
	if o == nil {
		return ""
	}
	return o.InputID
}

func (o *DashboardElementInput) GetLayout() DashboardLayout {
	if o == nil {
		return DashboardLayout{}
	}
	return o.Layout
}

func (o *DashboardElementInput) GetSearch() *SearchQueryUnion {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *DashboardElementInput) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *DashboardElementInput) GetType() InputElementType {
	if o == nil {
		return InputElementType("")
	}
	return o.Type
}

func (o *DashboardElementInput) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *DashboardElementInput) GetVariant() VariantInput {
	if o == nil {
		return VariantInput("")
	}
	return o.Variant
}

type VariantVisualization string

const (
	VariantVisualizationVisualization VariantVisualization = "visualization"
)

func (e VariantVisualization) ToPointer() *VariantVisualization {
	return &e
}
func (e *VariantVisualization) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "visualization":
		*e = VariantVisualization(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VariantVisualization: %v", v)
	}
}

type DashboardElementVisualization struct {
	Description     *string                  `json:"description,omitempty"`
	Empty           *bool                    `json:"empty,omitempty"`
	HidePanel       *bool                    `json:"hidePanel,omitempty"`
	HorizontalChart *bool                    `json:"horizontalChart,omitempty"`
	ID              string                   `json:"id"`
	Index           *float64                 `json:"index,omitempty"`
	Layout          DashboardLayout          `json:"layout"`
	Search          SearchQueryUnion         `json:"search"`
	Title           *string                  `json:"title,omitempty"`
	Type            VisualizationElementType `json:"type"`
	Variant         *VariantVisualization    `json:"variant,omitempty"`
}

func (o *DashboardElementVisualization) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DashboardElementVisualization) GetEmpty() *bool {
	if o == nil {
		return nil
	}
	return o.Empty
}

func (o *DashboardElementVisualization) GetHidePanel() *bool {
	if o == nil {
		return nil
	}
	return o.HidePanel
}

func (o *DashboardElementVisualization) GetHorizontalChart() *bool {
	if o == nil {
		return nil
	}
	return o.HorizontalChart
}

func (o *DashboardElementVisualization) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DashboardElementVisualization) GetIndex() *float64 {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *DashboardElementVisualization) GetLayout() DashboardLayout {
	if o == nil {
		return DashboardLayout{}
	}
	return o.Layout
}

func (o *DashboardElementVisualization) GetSearch() SearchQueryUnion {
	if o == nil {
		return SearchQueryUnion{}
	}
	return o.Search
}

func (o *DashboardElementVisualization) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *DashboardElementVisualization) GetType() VisualizationElementType {
	if o == nil {
		return VisualizationElementType{}
	}
	return o.Type
}

func (o *DashboardElementVisualization) GetVariant() *VariantVisualization {
	if o == nil {
		return nil
	}
	return o.Variant
}

type DashboardElementUnionType string

const (
	DashboardElementUnionTypeDashboardElementVisualization DashboardElementUnionType = "DashboardElement_Visualization"
	DashboardElementUnionTypeDashboardElementInput         DashboardElementUnionType = "DashboardElement_Input"
	DashboardElementUnionTypeDashboardElementMarkdown      DashboardElementUnionType = "DashboardElement_Markdown"
)

type DashboardElement struct {
	DashboardElementVisualization *DashboardElementVisualization `queryParam:"inline"`
	DashboardElementInput         *DashboardElementInput         `queryParam:"inline"`
	DashboardElementMarkdown      *DashboardElementMarkdown      `queryParam:"inline"`

	Type DashboardElementUnionType
}

func CreateDashboardElementDashboardElementVisualization(dashboardElementVisualization DashboardElementVisualization) DashboardElement {
	typ := DashboardElementUnionTypeDashboardElementVisualization

	return DashboardElement{
		DashboardElementVisualization: &dashboardElementVisualization,
		Type:                          typ,
	}
}

func CreateDashboardElementDashboardElementInput(dashboardElementInput DashboardElementInput) DashboardElement {
	typ := DashboardElementUnionTypeDashboardElementInput

	return DashboardElement{
		DashboardElementInput: &dashboardElementInput,
		Type:                  typ,
	}
}

func CreateDashboardElementDashboardElementMarkdown(dashboardElementMarkdown DashboardElementMarkdown) DashboardElement {
	typ := DashboardElementUnionTypeDashboardElementMarkdown

	return DashboardElement{
		DashboardElementMarkdown: &dashboardElementMarkdown,
		Type:                     typ,
	}
}

func (u *DashboardElement) UnmarshalJSON(data []byte) error {

	var dashboardElementMarkdown DashboardElementMarkdown = DashboardElementMarkdown{}
	if err := utils.UnmarshalJSON(data, &dashboardElementMarkdown, "", true, true); err == nil {
		u.DashboardElementMarkdown = &dashboardElementMarkdown
		u.Type = DashboardElementUnionTypeDashboardElementMarkdown
		return nil
	}

	var dashboardElementVisualization DashboardElementVisualization = DashboardElementVisualization{}
	if err := utils.UnmarshalJSON(data, &dashboardElementVisualization, "", true, true); err == nil {
		u.DashboardElementVisualization = &dashboardElementVisualization
		u.Type = DashboardElementUnionTypeDashboardElementVisualization
		return nil
	}

	var dashboardElementInput DashboardElementInput = DashboardElementInput{}
	if err := utils.UnmarshalJSON(data, &dashboardElementInput, "", true, true); err == nil {
		u.DashboardElementInput = &dashboardElementInput
		u.Type = DashboardElementUnionTypeDashboardElementInput
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DashboardElement", string(data))
}

func (u DashboardElement) MarshalJSON() ([]byte, error) {
	if u.DashboardElementVisualization != nil {
		return utils.MarshalJSON(u.DashboardElementVisualization, "", true)
	}

	if u.DashboardElementInput != nil {
		return utils.MarshalJSON(u.DashboardElementInput, "", true)
	}

	if u.DashboardElementMarkdown != nil {
		return utils.MarshalJSON(u.DashboardElementMarkdown, "", true)
	}

	return nil, errors.New("could not marshal union type DashboardElement: all fields are null")
}
