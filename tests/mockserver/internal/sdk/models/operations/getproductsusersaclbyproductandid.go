// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// GetProductsUsersACLByProductAndIDProduct - product by which to filter members
type GetProductsUsersACLByProductAndIDProduct string

const (
	GetProductsUsersACLByProductAndIDProductStream GetProductsUsersACLByProductAndIDProduct = "stream"
	GetProductsUsersACLByProductAndIDProductEdge   GetProductsUsersACLByProductAndIDProduct = "edge"
	GetProductsUsersACLByProductAndIDProductSearch GetProductsUsersACLByProductAndIDProduct = "search"
	GetProductsUsersACLByProductAndIDProductLake   GetProductsUsersACLByProductAndIDProduct = "lake"
)

func (e GetProductsUsersACLByProductAndIDProduct) ToPointer() *GetProductsUsersACLByProductAndIDProduct {
	return &e
}
func (e *GetProductsUsersACLByProductAndIDProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		fallthrough
	case "search":
		fallthrough
	case "lake":
		*e = GetProductsUsersACLByProductAndIDProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProductsUsersACLByProductAndIDProduct: %v", v)
	}
}

// GetProductsUsersACLByProductAndIDType - resource type by which to filter access levels
type GetProductsUsersACLByProductAndIDType string

const (
	GetProductsUsersACLByProductAndIDTypeGroups           GetProductsUsersACLByProductAndIDType = "groups"
	GetProductsUsersACLByProductAndIDTypeDatasets         GetProductsUsersACLByProductAndIDType = "datasets"
	GetProductsUsersACLByProductAndIDTypeDatasetProviders GetProductsUsersACLByProductAndIDType = "dataset-providers"
	GetProductsUsersACLByProductAndIDTypeProjects         GetProductsUsersACLByProductAndIDType = "projects"
	GetProductsUsersACLByProductAndIDTypeDashboards       GetProductsUsersACLByProductAndIDType = "dashboards"
	GetProductsUsersACLByProductAndIDTypeMacros           GetProductsUsersACLByProductAndIDType = "macros"
)

func (e GetProductsUsersACLByProductAndIDType) ToPointer() *GetProductsUsersACLByProductAndIDType {
	return &e
}
func (e *GetProductsUsersACLByProductAndIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "groups":
		fallthrough
	case "datasets":
		fallthrough
	case "dataset-providers":
		fallthrough
	case "projects":
		fallthrough
	case "dashboards":
		fallthrough
	case "macros":
		*e = GetProductsUsersACLByProductAndIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProductsUsersACLByProductAndIDType: %v", v)
	}
}

type GetProductsUsersACLByProductAndIDRequest struct {
	// product by which to filter members
	Product GetProductsUsersACLByProductAndIDProduct `pathParam:"style=simple,explode=false,name=product"`
	// user id
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// resource type by which to filter access levels
	Type *GetProductsUsersACLByProductAndIDType `queryParam:"style=form,explode=true,name=type"`
}

func (o *GetProductsUsersACLByProductAndIDRequest) GetProduct() GetProductsUsersACLByProductAndIDProduct {
	if o == nil {
		return GetProductsUsersACLByProductAndIDProduct("")
	}
	return o.Product
}

func (o *GetProductsUsersACLByProductAndIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProductsUsersACLByProductAndIDRequest) GetType() *GetProductsUsersACLByProductAndIDType {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetProductsUsersACLByProductAndIDResponseBody - a list of ResourcePolicy objects
type GetProductsUsersACLByProductAndIDResponseBody struct {
	// number of items present in the items array
	Count *int64                      `json:"count,omitempty"`
	Items []components.ResourcePolicy `json:"items,omitempty"`
}

func (o *GetProductsUsersACLByProductAndIDResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetProductsUsersACLByProductAndIDResponseBody) GetItems() []components.ResourcePolicy {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetProductsUsersACLByProductAndIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// a list of ResourcePolicy objects
	Object *GetProductsUsersACLByProductAndIDResponseBody
}

func (o *GetProductsUsersACLByProductAndIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProductsUsersACLByProductAndIDResponse) GetObject() *GetProductsUsersACLByProductAndIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
