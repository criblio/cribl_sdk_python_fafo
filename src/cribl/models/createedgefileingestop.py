"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CreateEdgeFileIngestRequestTypedDict(TypedDict):
    file_path: NotRequired[str]
    r"""Absolute path to file to ingest."""
    pipeline_id: NotRequired[str]
    r"""Id of the pipeline to use."""
    output_id: NotRequired[str]
    r"""Destination to send events to."""
    pre_processing_pipeline_id: NotRequired[str]
    r"""Id to the pre-processing pipeline to use for routes."""
    send_to_routes: NotRequired[str]
    r"""boolean condition required on whether to send events to routes."""
    breaker_rule_set: NotRequired[str]
    r"""Breaker rules to use on the file."""


class CreateEdgeFileIngestRequest(BaseModel):
    file_path: Annotated[
        Optional[str],
        pydantic.Field(alias="filePath"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Absolute path to file to ingest."""

    pipeline_id: Annotated[
        Optional[str],
        pydantic.Field(alias="pipelineId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Id of the pipeline to use."""

    output_id: Annotated[
        Optional[str],
        pydantic.Field(alias="outputId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Destination to send events to."""

    pre_processing_pipeline_id: Annotated[
        Optional[str],
        pydantic.Field(alias="preProcessingPipelineId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Id to the pre-processing pipeline to use for routes."""

    send_to_routes: Annotated[
        Optional[str],
        pydantic.Field(alias="sendToRoutes"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""boolean condition required on whether to send events to routes."""

    breaker_rule_set: Annotated[
        Optional[str],
        pydantic.Field(alias="breakerRuleSet"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Breaker rules to use on the file."""


class CreateEdgeFileIngestResponseBodyTypedDict(TypedDict):
    r"""a list of any objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[Dict[str, Any]]]


class CreateEdgeFileIngestResponseBody(BaseModel):
    r"""a list of any objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Dict[str, Any]]] = None
