"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .bucket import Bucket, BucketTypedDict
from .fieldtype import FieldType
from .topvalue import TopValue, TopValueTypedDict
from cribl_sdk_python_fafo.types import BaseModel
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


MaxTypedDict = TypeAliasType("MaxTypedDict", Union[str, float])


Max = TypeAliasType("Max", Union[str, float])


MinTypedDict = TypeAliasType("MinTypedDict", Union[str, float])


Min = TypeAliasType("Min", Union[str, float])


class FieldTTypedDict(TypedDict):
    buckets: List[BucketTypedDict]
    count: float
    count_distinct: float
    count_null: float
    name: str
    top_values: List[TopValueTypedDict]
    type: FieldType
    max: NotRequired[MaxTypedDict]
    mean: NotRequired[float]
    min: NotRequired[MinTypedDict]
    stdev: NotRequired[float]


class FieldT(BaseModel):
    buckets: List[Bucket]

    count: float

    count_distinct: Annotated[float, pydantic.Field(alias="countDistinct")]

    count_null: Annotated[float, pydantic.Field(alias="countNull")]

    name: str

    top_values: Annotated[List[TopValue], pydantic.Field(alias="topValues")]

    type: FieldType

    max: Optional[Max] = None

    mean: Optional[float] = None

    min: Optional[Min] = None

    stdev: Optional[float] = None
