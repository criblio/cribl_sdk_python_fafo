"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jobinfo import JobInfo, JobInfoTypedDict
from cribl.types import BaseModel
from cribl.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RunType(str, Enum):
    r"""Filter by job run type"""

    ADHOC = "adhoc"
    SCHEDULED = "scheduled"
    SYSTEM = "system"


class GetJobsRequestTypedDict(TypedDict):
    offset: NotRequired[int]
    r"""Pagination offset"""
    limit: NotRequired[int]
    r"""Maximum number of items to return"""
    run_type: NotRequired[RunType]
    r"""Filter by job run type"""
    state: NotRequired[str]
    r"""Filter by current job state, e.g. \"running\" """
    id: NotRequired[str]
    r"""Filter by job id, e.g. \"id=1608713335.3&id=1608713326.1\" """
    collector_id: NotRequired[str]
    r"""Filter by collector id, e.g. \"collectorId=Prometheus-in\" """
    group_id: NotRequired[str]
    r"""Filter by worker group id, e.g. \"defaultHybrid\" """


class GetJobsRequest(BaseModel):
    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Pagination offset"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Maximum number of items to return"""

    run_type: Annotated[
        Optional[RunType],
        pydantic.Field(alias="runType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by job run type"""

    state: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by current job state, e.g. \"running\" """

    id: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by job id, e.g. \"id=1608713335.3&id=1608713326.1\" """

    collector_id: Annotated[
        Optional[str],
        pydantic.Field(alias="collectorId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by collector id, e.g. \"collectorId=Prometheus-in\" """

    group_id: Annotated[
        Optional[str],
        pydantic.Field(alias="groupId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by worker group id, e.g. \"defaultHybrid\" """


class GetJobsResponseBodyTypedDict(TypedDict):
    r"""a list of JobInfo objects"""

    offset: NotRequired[int]
    r"""pagination offset"""
    limit: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[JobInfoTypedDict]]
    r"""the pre-limited items in the list of results"""


class GetJobsResponseBody(BaseModel):
    r"""a list of JobInfo objects"""

    offset: Optional[int] = None
    r"""pagination offset"""

    limit: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[JobInfo]] = None
    r"""the pre-limited items in the list of results"""
