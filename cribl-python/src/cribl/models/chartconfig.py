"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chartseries import ChartSeries, ChartSeriesTypedDict
from cribl.types import BaseModel
import pydantic
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class AxisTypedDict(TypedDict):
    x_axis: NotRequired[str]
    y_axis: NotRequired[List[str]]
    y_axis_excluded: NotRequired[List[str]]


class Axis(BaseModel):
    x_axis: Annotated[Optional[str], pydantic.Field(alias="xAxis")] = None

    y_axis: Annotated[Optional[List[str]], pydantic.Field(alias="yAxis")] = None

    y_axis_excluded: Annotated[
        Optional[List[str]], pydantic.Field(alias="yAxisExcluded")
    ] = None


class ThresholdsTypedDict(TypedDict):
    color: str
    threshold: float


class Thresholds(BaseModel):
    color: str

    threshold: float


class ColorThresholdsTypedDict(TypedDict):
    thresholds: List[ThresholdsTypedDict]


class ColorThresholds(BaseModel):
    thresholds: List[Thresholds]


PointScaleTypedDict = TypeAliasType("PointScaleTypedDict", Union[str, float])


PointScale = TypeAliasType("PointScale", Union[str, float])


class CustomDataTypedDict(TypedDict):
    connect_nulls: NotRequired[str]
    data_fields: NotRequired[List[str]]
    is_point_color: NotRequired[bool]
    limit_to_top_n: NotRequired[float]
    lines: NotRequired[bool]
    name_field: NotRequired[str]
    point_color_palette: NotRequired[float]
    point_color_palette_reversed: NotRequired[bool]
    point_scale: NotRequired[PointScaleTypedDict]
    point_scale_data_field: NotRequired[str]
    series_count: NotRequired[float]
    split_by: NotRequired[str]
    stack: NotRequired[bool]
    summarize_others: NotRequired[bool]
    trellis: NotRequired[bool]


class CustomData(BaseModel):
    connect_nulls: Annotated[Optional[str], pydantic.Field(alias="connectNulls")] = None

    data_fields: Annotated[Optional[List[str]], pydantic.Field(alias="dataFields")] = (
        None
    )

    is_point_color: Annotated[Optional[bool], pydantic.Field(alias="isPointColor")] = (
        None
    )

    limit_to_top_n: Annotated[Optional[float], pydantic.Field(alias="limitToTopN")] = (
        None
    )

    lines: Optional[bool] = None

    name_field: Annotated[Optional[str], pydantic.Field(alias="nameField")] = None

    point_color_palette: Annotated[
        Optional[float], pydantic.Field(alias="pointColorPalette")
    ] = None

    point_color_palette_reversed: Annotated[
        Optional[bool], pydantic.Field(alias="pointColorPaletteReversed")
    ] = None

    point_scale: Annotated[Optional[PointScale], pydantic.Field(alias="pointScale")] = (
        None
    )

    point_scale_data_field: Annotated[
        Optional[str], pydantic.Field(alias="pointScaleDataField")
    ] = None

    series_count: Annotated[Optional[float], pydantic.Field(alias="seriesCount")] = None

    split_by: Annotated[Optional[str], pydantic.Field(alias="splitBy")] = None

    stack: Optional[bool] = None

    summarize_others: Annotated[
        Optional[bool], pydantic.Field(alias="summarizeOthers")
    ] = None

    trellis: Optional[bool] = None


class LegendTypedDict(TypedDict):
    position: NotRequired[str]
    truncate: NotRequired[bool]


class Legend(BaseModel):
    position: Optional[str] = None

    truncate: Optional[bool] = None


ChartConfigPointScaleTypedDict = TypeAliasType(
    "ChartConfigPointScaleTypedDict", Union[str, float]
)


ChartConfigPointScale = TypeAliasType("ChartConfigPointScale", Union[str, float])


class MapDetailsTypedDict(TypedDict):
    latitude_field: NotRequired[str]
    longitude_field: NotRequired[str]
    map_source_id: NotRequired[str]
    map_type: NotRequired[str]
    name_field: NotRequired[str]
    point_scale: NotRequired[ChartConfigPointScaleTypedDict]
    value_field: NotRequired[str]


class MapDetails(BaseModel):
    latitude_field: Annotated[Optional[str], pydantic.Field(alias="latitudeField")] = (
        None
    )

    longitude_field: Annotated[
        Optional[str], pydantic.Field(alias="longitudeField")
    ] = None

    map_source_id: Annotated[Optional[str], pydantic.Field(alias="mapSourceID")] = None

    map_type: Annotated[Optional[str], pydantic.Field(alias="mapType")] = None

    name_field: Annotated[Optional[str], pydantic.Field(alias="nameField")] = None

    point_scale: Annotated[
        Optional[ChartConfigPointScale], pydantic.Field(alias="pointScale")
    ] = None

    value_field: Annotated[Optional[str], pydantic.Field(alias="valueField")] = None


class OnClickActionTypedDict(TypedDict):
    search: NotRequired[str]
    selected_dashboard_id: NotRequired[str]
    selected_input_id: NotRequired[str]
    selected_timerange_input_id: NotRequired[str]
    type: NotRequired[str]


class OnClickAction(BaseModel):
    search: Optional[str] = None

    selected_dashboard_id: Annotated[
        Optional[str], pydantic.Field(alias="selectedDashboardId")
    ] = None

    selected_input_id: Annotated[
        Optional[str], pydantic.Field(alias="selectedInputId")
    ] = None

    selected_timerange_input_id: Annotated[
        Optional[str], pydantic.Field(alias="selectedTimerangeInputId")
    ] = None

    type: Optional[str] = None


class XAxisTypedDict(TypedDict):
    data_field: NotRequired[str]
    inverse: NotRequired[bool]
    label_interval: NotRequired[str]
    label_orientation: NotRequired[float]
    name: NotRequired[str]
    offset: NotRequired[float]
    position: NotRequired[str]
    type: NotRequired[str]


class XAxis(BaseModel):
    data_field: Annotated[Optional[str], pydantic.Field(alias="dataField")] = None

    inverse: Optional[bool] = None

    label_interval: Annotated[Optional[str], pydantic.Field(alias="labelInterval")] = (
        None
    )

    label_orientation: Annotated[
        Optional[float], pydantic.Field(alias="labelOrientation")
    ] = None

    name: Optional[str] = None

    offset: Optional[float] = None

    position: Optional[str] = None

    type: Optional[str] = None


class YAxisTypedDict(TypedDict):
    data_field: NotRequired[List[str]]
    interval: NotRequired[float]
    max: NotRequired[float]
    min: NotRequired[float]
    position: NotRequired[str]
    scale: NotRequired[str]
    split_line: NotRequired[bool]
    type: NotRequired[str]


class YAxis(BaseModel):
    data_field: Annotated[Optional[List[str]], pydantic.Field(alias="dataField")] = None

    interval: Optional[float] = None

    max: Optional[float] = None

    min: Optional[float] = None

    position: Optional[str] = None

    scale: Optional[str] = None

    split_line: Annotated[Optional[bool], pydantic.Field(alias="splitLine")] = None

    type: Optional[str] = None


class ChartConfigTypedDict(TypedDict):
    color_palette: float
    type: str
    apply_threshold: NotRequired[bool]
    axis: NotRequired[AxisTypedDict]
    color: NotRequired[str]
    color_palette_reversed: NotRequired[bool]
    color_thresholds: NotRequired[ColorThresholdsTypedDict]
    custom_data: NotRequired[CustomDataTypedDict]
    decimals: NotRequired[float]
    label: NotRequired[str]
    legend: NotRequired[LegendTypedDict]
    map_details: NotRequired[MapDetailsTypedDict]
    on_click_action: NotRequired[OnClickActionTypedDict]
    prefix: NotRequired[str]
    separator: NotRequired[bool]
    series: NotRequired[List[ChartSeriesTypedDict]]
    should_apply_user_chart_settings: NotRequired[bool]
    style: NotRequired[bool]
    suffix: NotRequired[str]
    x_axis: NotRequired[XAxisTypedDict]
    y_axis: NotRequired[YAxisTypedDict]


class ChartConfig(BaseModel):
    color_palette: Annotated[float, pydantic.Field(alias="colorPalette")]

    type: str

    apply_threshold: Annotated[
        Optional[bool], pydantic.Field(alias="applyThreshold")
    ] = None

    axis: Optional[Axis] = None

    color: Optional[str] = None

    color_palette_reversed: Annotated[
        Optional[bool], pydantic.Field(alias="colorPaletteReversed")
    ] = None

    color_thresholds: Annotated[
        Optional[ColorThresholds], pydantic.Field(alias="colorThresholds")
    ] = None

    custom_data: Annotated[Optional[CustomData], pydantic.Field(alias="customData")] = (
        None
    )

    decimals: Optional[float] = None

    label: Optional[str] = None

    legend: Optional[Legend] = None

    map_details: Annotated[Optional[MapDetails], pydantic.Field(alias="mapDetails")] = (
        None
    )

    on_click_action: Annotated[
        Optional[OnClickAction], pydantic.Field(alias="onClickAction")
    ] = None

    prefix: Optional[str] = None

    separator: Optional[bool] = None

    series: Optional[List[ChartSeries]] = None

    should_apply_user_chart_settings: Annotated[
        Optional[bool], pydantic.Field(alias="shouldApplyUserChartSettings")
    ] = None

    style: Optional[bool] = None

    suffix: Optional[str] = None

    x_axis: Annotated[Optional[XAxis], pydantic.Field(alias="xAxis")] = None

    y_axis: Annotated[Optional[YAxis], pydantic.Field(alias="yAxis")] = None
