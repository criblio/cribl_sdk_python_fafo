"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
from enum import Enum
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class LookupFile2Mode(str, Enum):
    r"""Operation mode for CSV-based lookups"""

    MEMORY = "memory"
    DISK = "disk"


class LookupFile2InputTypedDict(TypedDict):
    id: str
    content: NotRequired[str]
    r"""File content."""
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    mode: NotRequired[LookupFile2Mode]
    r"""Operation mode for CSV-based lookups"""


class LookupFile2Input(BaseModel):
    id: str

    content: Optional[str] = None
    r"""File content."""

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    mode: Optional[LookupFile2Mode] = LookupFile2Mode.MEMORY
    r"""Operation mode for CSV-based lookups"""


class FileInfoTypedDict(TypedDict):
    filename: str


class FileInfo(BaseModel):
    filename: str


class LookupFileMode(str, Enum):
    r"""Operation mode for CSV-based lookups"""

    MEMORY = "memory"
    DISK = "disk"


class LookupFile1InputTypedDict(TypedDict):
    id: str
    file_info: NotRequired[FileInfoTypedDict]
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    mode: NotRequired[LookupFileMode]
    r"""Operation mode for CSV-based lookups"""


class LookupFile1Input(BaseModel):
    id: str

    file_info: Annotated[Optional[FileInfo], pydantic.Field(alias="fileInfo")] = None

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    mode: Optional[LookupFileMode] = LookupFileMode.MEMORY
    r"""Operation mode for CSV-based lookups"""


LookupFileInputTypedDict = TypeAliasType(
    "LookupFileInputTypedDict",
    Union[LookupFile1InputTypedDict, LookupFile2InputTypedDict],
)


LookupFileInput = TypeAliasType(
    "LookupFileInput", Union[LookupFile1Input, LookupFile2Input]
)


class LookupFile2Type(str, Enum):
    r"""Task type"""

    IMPORT = "IMPORT"
    INDEX = "INDEX"


class LookupFilePendingTaskTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Task ID (generated)."""
    type: NotRequired[LookupFile2Type]
    r"""Task type"""
    error: NotRequired[str]
    r"""Error message if task has failed"""


class LookupFilePendingTask(BaseModel):
    id: Optional[str] = None
    r"""Task ID (generated)."""

    type: Optional[LookupFile2Type] = None
    r"""Task type"""

    error: Optional[str] = None
    r"""Error message if task has failed"""


class LookupFile2TypedDict(TypedDict):
    id: str
    content: NotRequired[str]
    r"""File content."""
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    version: NotRequired[str]
    r"""Unique string generated for each modification of this lookup"""
    mode: NotRequired[LookupFile2Mode]
    r"""Operation mode for CSV-based lookups"""
    pending_task: NotRequired[LookupFilePendingTaskTypedDict]


class LookupFile2(BaseModel):
    id: str

    content: Optional[str] = None
    r"""File content."""

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    version: Optional[str] = None
    r"""Unique string generated for each modification of this lookup"""

    mode: Optional[LookupFile2Mode] = LookupFile2Mode.MEMORY
    r"""Operation mode for CSV-based lookups"""

    pending_task: Annotated[
        Optional[LookupFilePendingTask], pydantic.Field(alias="pendingTask")
    ] = None


class LookupFileType(str, Enum):
    r"""Task type"""

    IMPORT = "IMPORT"
    INDEX = "INDEX"


class PendingTaskTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Task ID (generated)."""
    type: NotRequired[LookupFileType]
    r"""Task type"""
    error: NotRequired[str]
    r"""Error message if task has failed"""


class PendingTask(BaseModel):
    id: Optional[str] = None
    r"""Task ID (generated)."""

    type: Optional[LookupFileType] = None
    r"""Task type"""

    error: Optional[str] = None
    r"""Error message if task has failed"""


class LookupFile1TypedDict(TypedDict):
    id: str
    file_info: NotRequired[FileInfoTypedDict]
    description: NotRequired[str]
    tags: NotRequired[str]
    r"""One or more tags related to this lookup. Optional."""
    size: NotRequired[float]
    r"""File size. Optional."""
    version: NotRequired[str]
    r"""Unique string generated for each modification of this lookup"""
    mode: NotRequired[LookupFileMode]
    r"""Operation mode for CSV-based lookups"""
    pending_task: NotRequired[PendingTaskTypedDict]


class LookupFile1(BaseModel):
    id: str

    file_info: Annotated[Optional[FileInfo], pydantic.Field(alias="fileInfo")] = None

    description: Optional[str] = None

    tags: Optional[str] = None
    r"""One or more tags related to this lookup. Optional."""

    size: Optional[float] = None
    r"""File size. Optional."""

    version: Optional[str] = None
    r"""Unique string generated for each modification of this lookup"""

    mode: Optional[LookupFileMode] = LookupFileMode.MEMORY
    r"""Operation mode for CSV-based lookups"""

    pending_task: Annotated[
        Optional[PendingTask], pydantic.Field(alias="pendingTask")
    ] = None


LookupFileTypedDict = TypeAliasType(
    "LookupFileTypedDict", Union[LookupFile1TypedDict, LookupFile2TypedDict]
)


LookupFile = TypeAliasType("LookupFile", Union[LookupFile1, LookupFile2])
