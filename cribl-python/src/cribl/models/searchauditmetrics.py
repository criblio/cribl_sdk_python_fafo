"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from cribl.types import BaseModel
import pydantic
from typing_extensions import Annotated, TypedDict


class ObjectsTypedDict(TypedDict):
    discovered: float
    scanned: float
    skipped: float


class Objects(BaseModel):
    discovered: float

    scanned: float

    skipped: float


class TimeTypedDict(TypedDict):
    queued_sec: float
    running_sec: float
    task_completion_total_sec: float
    task_receiving_total_sec: float


class Time(BaseModel):
    queued_sec: Annotated[float, pydantic.Field(alias="queuedSec")]

    running_sec: Annotated[float, pydantic.Field(alias="runningSec")]

    task_completion_total_sec: Annotated[
        float, pydantic.Field(alias="taskCompletionTotalSec")
    ]

    task_receiving_total_sec: Annotated[
        float, pydantic.Field(alias="taskReceivingTotalSec")
    ]


class SearchAuditMetricsTypedDict(TypedDict):
    bytes_in: float
    bytes_out: float
    events_in: float
    events_out: float
    objects: ObjectsTypedDict
    time: TimeTypedDict


class SearchAuditMetrics(BaseModel):
    bytes_in: Annotated[float, pydantic.Field(alias="bytesIn")]

    bytes_out: Annotated[float, pydantic.Field(alias="bytesOut")]

    events_in: Annotated[float, pydantic.Field(alias="eventsIn")]

    events_out: Annotated[float, pydantic.Field(alias="eventsOut")]

    objects: Objects

    time: Time
