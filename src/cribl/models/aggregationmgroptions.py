"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .searchaggmode import SearchAggMode
from cribl.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AggregationMgrOptionsTypedDict(TypedDict):
    aggregations: List[str]
    cumulative: bool
    flush_event_limit: float
    flush_mem_limit: float
    hostname: str
    metrics_mode: bool
    sufficient_stats_only: bool
    time_window_seconds: float
    dots_as_literals: NotRequired[bool]
    idle_time_limit_seconds: NotRequired[float]
    lag_tolerance_seconds: NotRequired[float]
    prefix: NotRequired[str]
    preserve_split_by_structure: NotRequired[bool]
    search_agg_mode: NotRequired[Nullable[SearchAggMode]]
    split_bys: NotRequired[List[str]]


class AggregationMgrOptions(BaseModel):
    aggregations: List[str]

    cumulative: bool

    flush_event_limit: Annotated[float, pydantic.Field(alias="flushEventLimit")]

    flush_mem_limit: Annotated[float, pydantic.Field(alias="flushMemLimit")]

    hostname: str

    metrics_mode: Annotated[bool, pydantic.Field(alias="metricsMode")]

    sufficient_stats_only: Annotated[bool, pydantic.Field(alias="sufficientStatsOnly")]

    time_window_seconds: Annotated[float, pydantic.Field(alias="timeWindowSeconds")]

    dots_as_literals: Annotated[
        Optional[bool], pydantic.Field(alias="dotsAsLiterals")
    ] = None

    idle_time_limit_seconds: Annotated[
        Optional[float], pydantic.Field(alias="idleTimeLimitSeconds")
    ] = None

    lag_tolerance_seconds: Annotated[
        Optional[float], pydantic.Field(alias="lagToleranceSeconds")
    ] = None

    prefix: Optional[str] = None

    preserve_split_by_structure: Annotated[
        Optional[bool], pydantic.Field(alias="preserveSplitByStructure")
    ] = None

    search_agg_mode: Annotated[
        OptionalNullable[SearchAggMode], pydantic.Field(alias="searchAggMode")
    ] = UNSET

    split_bys: Annotated[Optional[List[str]], pydantic.Field(alias="splitBys")] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "dotsAsLiterals",
            "idleTimeLimitSeconds",
            "lagToleranceSeconds",
            "prefix",
            "preserveSplitByStructure",
            "searchAggMode",
            "splitBys",
        ]
        nullable_fields = ["searchAggMode"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
